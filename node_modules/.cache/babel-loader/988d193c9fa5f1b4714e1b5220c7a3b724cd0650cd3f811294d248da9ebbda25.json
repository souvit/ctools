{"ast":null,"code":"import gql from 'graphql-tag';\nimport { useState } from 'react';\nimport useQueryFacade from '../useQueryFacade';\nconst query = gql`\n  query orderById($id: String, $locale: Locale!) {\n    me {\n      order(id: $id) {\n        id\n        version\n        orderNumber\n        createdAt\n        lineItems {\n          lineId: id\n          name(locale: $locale)\n          productSlug(locale: $locale)\n          quantity\n          price {\n            value {\n              centAmount\n              currencyCode\n              fractionDigits\n            }\n            discounted {\n              value {\n                centAmount\n                currencyCode\n                fractionDigits\n              }\n              discount {\n                name(locale: $locale)\n              }\n            }\n          }\n          totalPrice {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n          variant {\n            sku\n            images {\n              url\n            }\n            attributesRaw {\n              name\n              value\n              attributeDefinition {\n                type {\n                  name\n                }\n                name\n                label(locale: $locale)\n              }\n            }\n          }\n        }\n        totalPrice {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n        shippingInfo {\n          shippingMethod {\n            name\n            localizedDescription(locale: $locale)\n          }\n          price {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n        taxedPrice {\n          totalGross {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n          totalNet {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n        discountCodes {\n          discountCode {\n            id\n            code\n            name(locale: $locale)\n          }\n        }\n        shippingAddress {\n          firstName\n          lastName\n          streetName\n          additionalStreetInfo\n          postalCode\n          city\n          country\n          phone\n          email\n        }\n        billingAddress {\n          firstName\n          lastName\n          streetName\n          additionalStreetInfo\n          postalCode\n          city\n          country\n          phone\n          email\n        }\n        paymentInfo {\n          payments {\n            paymentStatus {\n              interfaceCode\n            }\n          }\n        }\n        returnInfo {\n          items {\n            id\n            type\n            ...returnedItem\n          }\n        }\n      }\n    }\n  }\n\n  fragment returnedItem on LineItemReturnItem {\n    lineItemId\n    quantity\n    shipmentState\n    paymentState\n  }\n`;\nfunction useMyOrder({\n  locale,\n  id\n}) {\n  const [order, setOrder] = useState(null);\n  const {\n    loading,\n    error\n  } = useQueryFacade(query, {\n    variables: {\n      id,\n      locale\n    },\n    onCompleted: data => {\n      if (!data) {\n        return;\n      }\n      const order = data.me.order;\n      const returned = data.me.order.returnInfo.flatMap(({\n        items\n      }) => items).reduce((acc, item) => {\n        const q = acc.get(item.lineItemId)?.quantity || 0;\n        acc.set(item.lineItemId, {\n          ...item,\n          quantity: item.quantity + q\n        });\n        return acc;\n      }, new Map());\n      setOrder({\n        ...order,\n        lineItems: order.lineItems.map(item => {\n          const q = returned.get(item.lineId)?.quantity;\n          return q ? {\n            ...item,\n            quantity: item.quantity - q\n          } : item;\n        }).filter(({\n          quantity\n        }) => Boolean(quantity)),\n        returnItems: {\n          lineItems: data.me.order.returnInfo.flatMap(({\n            items\n          }) => items).map(({\n            lineItemId,\n            quantity,\n            shipmentState,\n            paymentState\n          }) => ({\n            ...order.lineItems.find(({\n              lineId\n            }) => lineId === lineItemId),\n            quantity,\n            shipmentState,\n            paymentState\n          }))\n        }\n      });\n    }\n  });\n  return {\n    loading,\n    error,\n    order\n  };\n}\nexport default useMyOrder;","map":{"version":3,"names":["gql","useState","useQueryFacade","query","useMyOrder","locale","id","order","setOrder","loading","error","variables","onCompleted","data","me","returned","returnInfo","flatMap","items","reduce","acc","item","q","get","lineItemId","quantity","set","Map","lineItems","map","lineId","filter","Boolean","returnItems","shipmentState","paymentState","find"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useMyOrder.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport { useState } from 'react';\r\nimport useQueryFacade from '../useQueryFacade';\r\nconst query = gql`\r\n  query orderById($id: String, $locale: Locale!) {\r\n    me {\r\n      order(id: $id) {\r\n        id\r\n        version\r\n        orderNumber\r\n        createdAt\r\n        lineItems {\r\n          lineId: id\r\n          name(locale: $locale)\r\n          productSlug(locale: $locale)\r\n          quantity\r\n          price {\r\n            value {\r\n              centAmount\r\n              currencyCode\r\n              fractionDigits\r\n            }\r\n            discounted {\r\n              value {\r\n                centAmount\r\n                currencyCode\r\n                fractionDigits\r\n              }\r\n              discount {\r\n                name(locale: $locale)\r\n              }\r\n            }\r\n          }\r\n          totalPrice {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n          variant {\r\n            sku\r\n            images {\r\n              url\r\n            }\r\n            attributesRaw {\r\n              name\r\n              value\r\n              attributeDefinition {\r\n                type {\r\n                  name\r\n                }\r\n                name\r\n                label(locale: $locale)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        totalPrice {\r\n          centAmount\r\n          currencyCode\r\n          fractionDigits\r\n        }\r\n        shippingInfo {\r\n          shippingMethod {\r\n            name\r\n            localizedDescription(locale: $locale)\r\n          }\r\n          price {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n        }\r\n        taxedPrice {\r\n          totalGross {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n          totalNet {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n        }\r\n        discountCodes {\r\n          discountCode {\r\n            id\r\n            code\r\n            name(locale: $locale)\r\n          }\r\n        }\r\n        shippingAddress {\r\n          firstName\r\n          lastName\r\n          streetName\r\n          additionalStreetInfo\r\n          postalCode\r\n          city\r\n          country\r\n          phone\r\n          email\r\n        }\r\n        billingAddress {\r\n          firstName\r\n          lastName\r\n          streetName\r\n          additionalStreetInfo\r\n          postalCode\r\n          city\r\n          country\r\n          phone\r\n          email\r\n        }\r\n        paymentInfo {\r\n          payments {\r\n            paymentStatus {\r\n              interfaceCode\r\n            }\r\n          }\r\n        }\r\n        returnInfo {\r\n          items {\r\n            id\r\n            type\r\n            ...returnedItem\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  fragment returnedItem on LineItemReturnItem {\r\n    lineItemId\r\n    quantity\r\n    shipmentState\r\n    paymentState\r\n  }\r\n`;\r\n\r\nfunction useMyOrder({ locale, id }) {\r\n  const [order, setOrder] = useState(null);\r\n  const { loading, error } = useQueryFacade(query, {\r\n    variables: { id, locale },\r\n    onCompleted: (data) => {\r\n      if (!data) {\r\n        return;\r\n      }\r\n\r\n      const order = data.me.order;\r\n      const returned = data.me.order.returnInfo\r\n        .flatMap(({ items }) => items)\r\n        .reduce((acc, item) => {\r\n          const q = acc.get(item.lineItemId)?.quantity || 0;\r\n          acc.set(item.lineItemId, {\r\n            ...item,\r\n            quantity: item.quantity + q,\r\n          });\r\n          return acc;\r\n        }, new Map());\r\n      setOrder({\r\n        ...order,\r\n        lineItems: order.lineItems\r\n          .map((item) => {\r\n            const q = returned.get(item.lineId)?.quantity;\r\n            return q\r\n              ? { ...item, quantity: item.quantity - q }\r\n              : item;\r\n          })\r\n          .filter(({ quantity }) => Boolean(quantity)),\r\n        returnItems: {\r\n          lineItems: data.me.order.returnInfo\r\n            .flatMap(({ items }) => items)\r\n            .map(\r\n              ({\r\n                lineItemId,\r\n                quantity,\r\n                shipmentState,\r\n                paymentState,\r\n              }) => ({\r\n                ...order.lineItems.find(\r\n                  ({ lineId }) => lineId === lineItemId\r\n                ),\r\n                quantity,\r\n                shipmentState,\r\n                paymentState,\r\n              })\r\n            ),\r\n        },\r\n      });\r\n    },\r\n  });\r\n  return { loading, error, order };\r\n}\r\nexport default useMyOrder;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,MAAMC,KAAK,GAAGH,GAAI;AACllC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEQ,OAAO;IAAEC;EAAM,CAAC,GAAGR,cAAc,CAACC,KAAK,EAAE;IAC/CQ,SAAS,EAAE;MAAEL,EAAE;MAAED;IAAO,CAAC;IACzBO,WAAW,EAAGC,IAAI,IAAK;MACrB,IAAI,CAACA,IAAI,EAAE;QACT;MACF;MAEA,MAAMN,KAAK,GAAGM,IAAI,CAACC,EAAE,CAACP,KAAK;MAC3B,MAAMQ,QAAQ,GAAGF,IAAI,CAACC,EAAE,CAACP,KAAK,CAACS,UAAU,CACtCC,OAAO,CAAC,CAAC;QAAEC;MAAM,CAAC,KAAKA,KAAK,CAAC,CAC7BC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QACrB,MAAMC,CAAC,GAAGF,GAAG,CAACG,GAAG,CAACF,IAAI,CAACG,UAAU,CAAC,EAAEC,QAAQ,IAAI,CAAC;QACjDL,GAAG,CAACM,GAAG,CAACL,IAAI,CAACG,UAAU,EAAE;UACvB,GAAGH,IAAI;UACPI,QAAQ,EAAEJ,IAAI,CAACI,QAAQ,GAAGH;QAC5B,CAAC,CAAC;QACF,OAAOF,GAAG;MACZ,CAAC,EAAE,IAAIO,GAAG,EAAE,CAAC;MACfnB,QAAQ,CAAC;QACP,GAAGD,KAAK;QACRqB,SAAS,EAAErB,KAAK,CAACqB,SAAS,CACvBC,GAAG,CAAER,IAAI,IAAK;UACb,MAAMC,CAAC,GAAGP,QAAQ,CAACQ,GAAG,CAACF,IAAI,CAACS,MAAM,CAAC,EAAEL,QAAQ;UAC7C,OAAOH,CAAC,GACJ;YAAE,GAAGD,IAAI;YAAEI,QAAQ,EAAEJ,IAAI,CAACI,QAAQ,GAAGH;UAAE,CAAC,GACxCD,IAAI;QACV,CAAC,CAAC,CACDU,MAAM,CAAC,CAAC;UAAEN;QAAS,CAAC,KAAKO,OAAO,CAACP,QAAQ,CAAC,CAAC;QAC9CQ,WAAW,EAAE;UACXL,SAAS,EAAEf,IAAI,CAACC,EAAE,CAACP,KAAK,CAACS,UAAU,CAChCC,OAAO,CAAC,CAAC;YAAEC;UAAM,CAAC,KAAKA,KAAK,CAAC,CAC7BW,GAAG,CACF,CAAC;YACCL,UAAU;YACVC,QAAQ;YACRS,aAAa;YACbC;UACF,CAAC,MAAM;YACL,GAAG5B,KAAK,CAACqB,SAAS,CAACQ,IAAI,CACrB,CAAC;cAAEN;YAAO,CAAC,KAAKA,MAAM,KAAKN,UAAU,CACtC;YACDC,QAAQ;YACRS,aAAa;YACbC;UACF,CAAC,CAAC;QAER;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAO;IAAE1B,OAAO;IAAEC,KAAK;IAAEH;EAAM,CAAC;AAClC;AACA,eAAeH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}