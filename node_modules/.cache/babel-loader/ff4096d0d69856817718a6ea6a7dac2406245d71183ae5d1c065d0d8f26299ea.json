{"ast":null,"code":"import gql from 'graphql-tag';\nimport useQueryFacade from '../useQueryFacade';\nimport { useState, useEffect } from 'react';\nimport { getValue } from '../../src/lib';\n\n//@todo: we will worry about importing the partials\n//  when the cart route is done\nconst query = gql`\n  query myCart($locale: Locale!) {\n    myCart: me {\n      activeCart {\n        cartId: id\n        version\n        lineItems {\n          lineId: id\n          name(locale: $locale)\n          productSlug(locale: $locale)\n          quantity\n          price {\n            value {\n              centAmount\n              currencyCode\n              fractionDigits\n            }\n            discounted {\n              value {\n                centAmount\n                currencyCode\n                fractionDigits\n              }\n              discount {\n                name(locale: $locale)\n              }\n            }\n          }\n          totalPrice {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n          variant {\n            sku\n            images {\n              url\n            }\n            attributesRaw {\n              name\n              value\n              attributeDefinition {\n                type {\n                  name\n                }\n                name\n                label(locale: $locale)\n              }\n            }\n          }\n        }\n        totalPrice {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n        shippingInfo {\n          shippingMethod {\n            methodId: id\n            name\n            localizedDescription(locale: $locale)\n          }\n          price {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n        taxedPrice {\n          totalGross {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n          totalNet {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n        discountCodes {\n          discountCode {\n            codeId: id\n            code\n            name(locale: $locale)\n          }\n        }\n        shippingAddress {\n          firstName\n          lastName\n          streetName\n          additionalStreetInfo\n          postalCode\n          city\n          country\n          phone\n          email\n        }\n        billingAddress {\n          firstName\n          lastName\n          streetName\n          additionalStreetInfo\n          postalCode\n          city\n          country\n          phone\n          email\n        }\n      }\n    }\n  }\n`;\n//this is the React api useQuery(query,options)\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\nconst useCart = ({\n  locale\n}) => {\n  const [cart, setCart] = useState();\n  const [exist, setExist] = useState();\n  const {\n    loading,\n    error\n  } = useQueryFacade(query, {\n    variables: {\n      locale\n    },\n    onCompleted: data => {\n      if (!data) {\n        return;\n      }\n      setCart(data.myCart.activeCart);\n    }\n  });\n  useEffect(() => setExist(!getValue(loading) && !getValue(error) ? Boolean(getValue(cart)) : undefined), [cart, loading, error]);\n  return {\n    cart,\n    exist,\n    loading,\n    error\n  };\n};\nexport default useCart;","map":{"version":3,"names":["gql","useQueryFacade","useState","useEffect","getValue","query","useCart","locale","cart","setCart","exist","setExist","loading","error","variables","onCompleted","data","myCart","activeCart","Boolean","undefined"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useCart.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport useQueryFacade from '../useQueryFacade';\r\nimport { useState, useEffect } from 'react';\r\nimport { getValue } from '../../src/lib';\r\n\r\n//@todo: we will worry about importing the partials\r\n//  when the cart route is done\r\nconst query = gql`\r\n  query myCart($locale: Locale!) {\r\n    myCart: me {\r\n      activeCart {\r\n        cartId: id\r\n        version\r\n        lineItems {\r\n          lineId: id\r\n          name(locale: $locale)\r\n          productSlug(locale: $locale)\r\n          quantity\r\n          price {\r\n            value {\r\n              centAmount\r\n              currencyCode\r\n              fractionDigits\r\n            }\r\n            discounted {\r\n              value {\r\n                centAmount\r\n                currencyCode\r\n                fractionDigits\r\n              }\r\n              discount {\r\n                name(locale: $locale)\r\n              }\r\n            }\r\n          }\r\n          totalPrice {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n          variant {\r\n            sku\r\n            images {\r\n              url\r\n            }\r\n            attributesRaw {\r\n              name\r\n              value\r\n              attributeDefinition {\r\n                type {\r\n                  name\r\n                }\r\n                name\r\n                label(locale: $locale)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        totalPrice {\r\n          centAmount\r\n          currencyCode\r\n          fractionDigits\r\n        }\r\n        shippingInfo {\r\n          shippingMethod {\r\n            methodId: id\r\n            name\r\n            localizedDescription(locale: $locale)\r\n          }\r\n          price {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n        }\r\n        taxedPrice {\r\n          totalGross {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n          totalNet {\r\n            centAmount\r\n            currencyCode\r\n            fractionDigits\r\n          }\r\n        }\r\n        discountCodes {\r\n          discountCode {\r\n            codeId: id\r\n            code\r\n            name(locale: $locale)\r\n          }\r\n        }\r\n        shippingAddress {\r\n          firstName\r\n          lastName\r\n          streetName\r\n          additionalStreetInfo\r\n          postalCode\r\n          city\r\n          country\r\n          phone\r\n          email\r\n        }\r\n        billingAddress {\r\n          firstName\r\n          lastName\r\n          streetName\r\n          additionalStreetInfo\r\n          postalCode\r\n          city\r\n          country\r\n          phone\r\n          email\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n//this is the React api useQuery(query,options)\r\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\r\nconst useCart = ({ locale }) => {\r\n  const [cart, setCart] = useState();\r\n  const [exist, setExist] = useState();\r\n\r\n  const { loading, error } = useQueryFacade(query, {\r\n    variables: { locale },\r\n    onCompleted: (data) => {\r\n      if (!data) {\r\n        return;\r\n      }\r\n      setCart(data.myCart.activeCart);\r\n    },\r\n  });\r\n  useEffect(\r\n    () =>\r\n      setExist(\r\n        !getValue(loading) && !getValue(error)\r\n          ? Boolean(getValue(cart))\r\n          : undefined\r\n      ),\r\n    [cart, loading, error]\r\n  );\r\n  return { cart, exist, loading, error };\r\n};\r\nexport default useCart;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,eAAe;;AAExC;AACA;AACA,MAAMC,KAAK,GAAGL,GAAI;AACllC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,EAAE;EAEpC,MAAM;IAAEU,OAAO;IAAEC;EAAM,CAAC,GAAGZ,cAAc,CAACI,KAAK,EAAE;IAC/CS,SAAS,EAAE;MAAEP;IAAO,CAAC;IACrBQ,WAAW,EAAGC,IAAI,IAAK;MACrB,IAAI,CAACA,IAAI,EAAE;QACT;MACF;MACAP,OAAO,CAACO,IAAI,CAACC,MAAM,CAACC,UAAU,CAAC;IACjC;EACF,CAAC,CAAC;EACFf,SAAS,CACP,MACEQ,QAAQ,CACN,CAACP,QAAQ,CAACQ,OAAO,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,CAAC,GAClCM,OAAO,CAACf,QAAQ,CAACI,IAAI,CAAC,CAAC,GACvBY,SAAS,CACd,EACH,CAACZ,IAAI,EAAEI,OAAO,EAAEC,KAAK,CAAC,CACvB;EACD,OAAO;IAAEL,IAAI;IAAEE,KAAK;IAAEE,OAAO;IAAEC;EAAM,CAAC;AACxC,CAAC;AACD,eAAeP,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}