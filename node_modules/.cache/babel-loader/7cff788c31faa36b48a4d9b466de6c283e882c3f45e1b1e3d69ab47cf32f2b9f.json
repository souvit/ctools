{"ast":null,"code":"import { encode } from 'js-base64';\nimport { ACCESS_TOKEN, CUSTOMER, REFRESH_TOKEN } from '../constants';\nimport { createGroup, createPromiseSessionCache } from './group';\nimport config from '../../sunrise.config';\nimport fetch from 'isomorphic-fetch';\nconst createAuth = au => encode(`${au.id}:${au.secret}`);\nconst au = {\n  id: config.ct.auth.credentials.clientId,\n  secret: config.ct.auth.credentials.clientSecret,\n  scope: config.ct.auth.scope,\n  projectKey: config.ct.auth.projectKey,\n  authUrl: config.ct.auth.host\n};\nconst saveToken = ({\n  access_token,\n  refresh_token\n}) => {\n  access_token && localStorage.setItem(ACCESS_TOKEN, access_token);\n  refresh_token && localStorage.setItem(REFRESH_TOKEN, refresh_token);\n  return access_token;\n};\nexport const resetToken = () => {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n};\nconst group = createGroup(createPromiseSessionCache());\nconst getToken = group(() => {\n  const token = localStorage.getItem(ACCESS_TOKEN);\n  if (token) {\n    return Promise.resolve(token);\n  }\n  const scope = encodeURI(au.scope);\n  const auth = createAuth(au);\n  return fetch(`${au.authUrl}/oauth/${au.projectKey}/anonymous/token`, {\n    headers: {\n      authorization: `Basic ${auth}`,\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    body: `grant_type=client_credentials&scope=${scope}`,\n    method: 'POST'\n  }).then(response => response.ok ? response.json() : Promise.reject(response)).then(saveToken).catch(handleError);\n});\nexport const handleError = error => {\n  return Promise.reject(error);\n};\nexport const fetchWithToken = (url, options) => {\n  return getToken().then(token => {\n    return fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      //@todo: a change may not produce 401 for brute force token trying\n      //  see how we can catch an invalid token instead\n      if (response.status === 401) {\n        return refreshToken({\n          id: config.ct.auth.credentials.clientId,\n          secret: config.ct.auth.credentials.clientSecret,\n          scope: config.ct.auth.scope,\n          projectKey: config.ct.auth.projectKey,\n          authUrl: config.ct.auth.host\n        }).then(() => {\n          return fetchWithToken(url, options);\n        });\n      }\n      return response;\n    }, error => {\n      resetToken();\n      return Promise.reject(error);\n    });\n  }, handleError);\n};\nconst refreshToken = group(au => {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n  const auth = createAuth(au);\n  if (!refreshToken) {\n    resetToken();\n    return Promise.reject('no refresh token');\n  }\n  return fetch(`${au.authUrl}/oauth/token`, {\n    headers: {\n      authorization: `Basic ${auth}`,\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n    method: 'POST'\n  }).then(response => response.json()).then(token => {\n    if (token?.error) {\n      resetToken();\n      return Promise.reject(token.error);\n    }\n    saveToken(token);\n  });\n});\nexport const loginToken = (email, password) => {\n  const auth = createAuth(au);\n  return fetch(`${au.authUrl}/oauth/${au.projectKey}/customers/token`, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      authorization: `Basic ${auth}`\n    },\n    body: new URLSearchParams({\n      username: email,\n      password,\n      grant_type: 'password',\n      scope: config.ct.auth.scope\n    }),\n    method: 'POST'\n  }).then(response => response.json()).then(response => {\n    saveToken(response);\n  });\n};\nexport const logout = () => {\n  resetToken();\n  localStorage.removeItem(CUSTOMER);\n};\nexport default fetchWithToken;","map":{"version":3,"names":["encode","ACCESS_TOKEN","CUSTOMER","REFRESH_TOKEN","createGroup","createPromiseSessionCache","config","fetch","createAuth","au","id","secret","ct","auth","credentials","clientId","clientSecret","scope","projectKey","authUrl","host","saveToken","access_token","refresh_token","localStorage","setItem","resetToken","removeItem","group","getToken","token","getItem","Promise","resolve","encodeURI","headers","authorization","body","method","then","response","ok","json","reject","catch","handleError","error","fetchWithToken","url","options","status","refreshToken","loginToken","email","password","URLSearchParams","username","grant_type","logout"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/src/apollo/auth.js"],"sourcesContent":["import { encode } from 'js-base64';\r\nimport {\r\n  ACCESS_TOKEN,\r\n  CUSTOMER,\r\n  REFRESH_TOKEN,\r\n} from '../constants';\r\nimport {\r\n  createGroup,\r\n  createPromiseSessionCache,\r\n} from './group';\r\nimport config from '../../sunrise.config';\r\nimport fetch from 'isomorphic-fetch';\r\n\r\nconst createAuth = (au) => encode(`${au.id}:${au.secret}`);\r\nconst au = {\r\n  id: config.ct.auth.credentials.clientId,\r\n  secret: config.ct.auth.credentials.clientSecret,\r\n  scope: config.ct.auth.scope,\r\n  projectKey: config.ct.auth.projectKey,\r\n  authUrl: config.ct.auth.host,\r\n};\r\n\r\nconst saveToken = ({ access_token, refresh_token }) => {\r\n  access_token &&\r\n    localStorage.setItem(ACCESS_TOKEN, access_token);\r\n  refresh_token &&\r\n    localStorage.setItem(REFRESH_TOKEN, refresh_token);\r\n  return access_token;\r\n};\r\nexport const resetToken = () => {\r\n  localStorage.removeItem(ACCESS_TOKEN);\r\n  localStorage.removeItem(REFRESH_TOKEN);\r\n};\r\nconst group = createGroup(createPromiseSessionCache());\r\nconst getToken = group(() => {\r\n  const token = localStorage.getItem(ACCESS_TOKEN);\r\n  if (token) {\r\n    return Promise.resolve(token);\r\n  }\r\n  const scope = encodeURI(au.scope);\r\n  const auth = createAuth(au);\r\n  return fetch(\r\n    `${au.authUrl}/oauth/${au.projectKey}/anonymous/token`,\r\n    {\r\n      headers: {\r\n        authorization: `Basic ${auth}`,\r\n        'content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: `grant_type=client_credentials&scope=${scope}`,\r\n      method: 'POST',\r\n    }\r\n  )\r\n    .then((response) =>\r\n      response.ok\r\n        ? response.json()\r\n        : Promise.reject(response)\r\n    )\r\n    .then(saveToken)\r\n    .catch(handleError);\r\n});\r\nexport const handleError = (error) => {\r\n  return Promise.reject(error);\r\n};\r\nexport const fetchWithToken = (url, options) => {\r\n  return getToken().then((token) => {\r\n    return fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        ...options.headers,\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    }).then(\r\n      (response) => {\r\n        //@todo: a change may not produce 401 for brute force token trying\r\n        //  see how we can catch an invalid token instead\r\n        if (response.status === 401) {\r\n          return refreshToken({\r\n            id: config.ct.auth.credentials.clientId,\r\n            secret: config.ct.auth.credentials.clientSecret,\r\n            scope: config.ct.auth.scope,\r\n            projectKey: config.ct.auth.projectKey,\r\n            authUrl: config.ct.auth.host,\r\n          }).then(() => {\r\n            return fetchWithToken(url, options);\r\n          });\r\n        }\r\n        return response;\r\n      },\r\n      (error) => {\r\n        resetToken();\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }, handleError);\r\n};\r\nconst refreshToken = group((au) => {\r\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\r\n  const auth = createAuth(au);\r\n  if (!refreshToken) {\r\n    resetToken();\r\n    return Promise.reject('no refresh token');\r\n  }\r\n  return fetch(`${au.authUrl}/oauth/token`, {\r\n    headers: {\r\n      authorization: `Basic ${auth}`,\r\n      'content-type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\r\n    method: 'POST',\r\n  })\r\n    .then((response) => response.json())\r\n    .then((token) => {\r\n      if (token?.error) {\r\n        resetToken();\r\n        return Promise.reject(token.error);\r\n      }\r\n      saveToken(token);\r\n    });\r\n});\r\n\r\nexport const loginToken = (email, password) => {\r\n  const auth = createAuth(au);\r\n  return fetch(\r\n    `${au.authUrl}/oauth/${au.projectKey}/customers/token`,\r\n    {\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        authorization: `Basic ${auth}`,\r\n      },\r\n      body: new URLSearchParams({\r\n        username: email,\r\n        password,\r\n        grant_type: 'password',\r\n        scope: config.ct.auth.scope,\r\n      }),\r\n      method: 'POST',\r\n    }\r\n  )\r\n    .then((response) => response.json())\r\n    .then((response) => {\r\n      saveToken(response);\r\n    });\r\n};\r\nexport const logout = () => {\r\n  resetToken();\r\n  localStorage.removeItem(CUSTOMER);\r\n};\r\nexport default fetchWithToken;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}