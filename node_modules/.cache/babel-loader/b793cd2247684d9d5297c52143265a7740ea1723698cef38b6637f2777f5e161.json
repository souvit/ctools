{"ast":null,"code":"import gql from 'graphql-tag';\nimport { getValue } from '../../src/lib';\nimport useQuery from '../useQueryFacade';\nimport { useState, useEffect } from 'react';\n\n//@todo: we will worry about importing the partials\n//  when the cart route is done\nconst createQuery = where => gql`\n    query categories($locale: Locale! ${where ? ', $where: String!' : ''}, $sort: [String!] = []) {\n      categories(sort: $sort${where ? ', where: $where' : ''}) {\n        count\n        total\n        results {\n          id\n          slug(locale: $locale)\n          name(locale: $locale)\n        }\n      }\n    }\n  `;\nconst createWhere = (categorySlug, rootOnly, locale) => {\n  const where = [getValue(categorySlug) && getValue(locale) ? `slug(${getValue(locale)}=\"${getValue(categorySlug)}\")` : false, getValue(rootOnly) ? 'parent is not defined' : false].filter(x => x);\n  return where.length ? where.join(' and ') : null;\n};\n//this is the React api useQuery(query,options)\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\nconst useCategories = ({\n  locale,\n  categorySlug,\n  rootOnly,\n  sort,\n  skip\n}) => {\n  const [categories, setCategories] = useState();\n  const [total, setTotal] = useState();\n  const [where, setWhere] = useState(createWhere(categorySlug, rootOnly, locale));\n  const [skipQuery, setSkipQuery] = useState(true);\n  const [query, setQuery] = useState(createQuery(getValue(where)));\n  useEffect(() => {\n    const _where = createWhere(categorySlug, rootOnly, locale);\n    setWhere(_where);\n    setQuery(createQuery(_where));\n  }, [categorySlug, rootOnly, locale]);\n  useEffect(() => setSkipQuery(getValue(skip) || getValue(categorySlug) && !getValue(where)), [skip, categorySlug, where]);\n  const {\n    loading,\n    error\n  } = useQuery(query, {\n    variables: {\n      locale,\n      where,\n      sort\n    },\n    onCompleted: data => {\n      if (!data) {\n        return;\n      }\n      setCategories(data.categories.results);\n      setTotal(data.categories.total);\n    },\n    skip: skipQuery\n  });\n  return {\n    total,\n    categories,\n    loading,\n    error\n  };\n};\nexport default useCategories;","map":{"version":3,"names":["gql","getValue","useQuery","useState","useEffect","createQuery","where","createWhere","categorySlug","rootOnly","locale","filter","x","length","join","useCategories","sort","skip","categories","setCategories","total","setTotal","setWhere","skipQuery","setSkipQuery","query","setQuery","_where","loading","error","variables","onCompleted","data","results"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useCategories.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport { getValue } from '../../src/lib';\r\nimport useQuery from '../useQueryFacade';\r\nimport { useState, useEffect } from 'react';\r\n\r\n//@todo: we will worry about importing the partials\r\n//  when the cart route is done\r\nconst createQuery = (where) => gql`\r\n    query categories($locale: Locale! ${\r\n      where ? ', $where: String!' : ''\r\n    }, $sort: [String!] = []) {\r\n      categories(sort: $sort${\r\n        where ? ', where: $where' : ''\r\n      }) {\r\n        count\r\n        total\r\n        results {\r\n          id\r\n          slug(locale: $locale)\r\n          name(locale: $locale)\r\n        }\r\n      }\r\n    }\r\n  `;\r\nconst createWhere = (categorySlug, rootOnly, locale) => {\r\n  const where = [\r\n    getValue(categorySlug) && getValue(locale)\r\n      ? `slug(${getValue(locale)}=\"${getValue(\r\n          categorySlug\r\n        )}\")`\r\n      : false,\r\n    getValue(rootOnly) ? 'parent is not defined' : false,\r\n  ].filter((x) => x);\r\n  return where.length ? where.join(' and ') : null;\r\n};\r\n//this is the React api useQuery(query,options)\r\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\r\nconst useCategories = ({\r\n  locale,\r\n  categorySlug,\r\n  rootOnly,\r\n  sort,\r\n  skip,\r\n}) => {\r\n  const [categories, setCategories] = useState();\r\n  const [total, setTotal] = useState();\r\n  const [where, setWhere] = useState(\r\n    createWhere(categorySlug, rootOnly, locale)\r\n  );\r\n  const [skipQuery, setSkipQuery] = useState(true);\r\n  const [query, setQuery] = useState(\r\n    createQuery(getValue(where))\r\n  );\r\n  useEffect(() => {\r\n    const _where = createWhere(\r\n      categorySlug,\r\n      rootOnly,\r\n      locale\r\n    );\r\n    setWhere(_where);\r\n    setQuery(createQuery(_where));\r\n  }, [categorySlug, rootOnly, locale]);\r\n  useEffect(\r\n    () =>\r\n      setSkipQuery(\r\n        getValue(skip) ||\r\n          (getValue(categorySlug) && !getValue(where))\r\n      ),\r\n    [skip, categorySlug, where]\r\n  );\r\n  const { loading, error } = useQuery(query, {\r\n    variables: {\r\n      locale,\r\n      where,\r\n      sort,\r\n    },\r\n    onCompleted: (data) => {\r\n      if (!data) {\r\n        return;\r\n      }\r\n      setCategories(data.categories.results);\r\n      setTotal(data.categories.total);\r\n    },\r\n    skip: skipQuery,\r\n  });\r\n  return { total, categories, loading, error };\r\n};\r\nexport default useCategories;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,SAASC,QAAQ,QAAQ,eAAe;AACxC,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA,MAAMC,WAAW,GAAIC,KAAK,IAAKN,GAAI;AACnC,wCACMM,KAAK,GAAG,mBAAmB,GAAG,EAC/B;AACL,8BACQA,KAAK,GAAG,iBAAiB,GAAG,EAC7B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,MAAMC,WAAW,GAAG,CAACC,YAAY,EAAEC,QAAQ,EAAEC,MAAM,KAAK;EACtD,MAAMJ,KAAK,GAAG,CACZL,QAAQ,CAACO,YAAY,CAAC,IAAIP,QAAQ,CAACS,MAAM,CAAC,GACrC,QAAOT,QAAQ,CAACS,MAAM,CAAE,KAAIT,QAAQ,CACnCO,YAAY,CACZ,IAAG,GACL,KAAK,EACTP,QAAQ,CAACQ,QAAQ,CAAC,GAAG,uBAAuB,GAAG,KAAK,CACrD,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC;EAClB,OAAON,KAAK,CAACO,MAAM,GAAGP,KAAK,CAACQ,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI;AAClD,CAAC;AACD;AACA;AACA,MAAMC,aAAa,GAAG,CAAC;EACrBL,MAAM;EACNF,YAAY;EACZC,QAAQ;EACRO,IAAI;EACJC;AACF,CAAC,KAAK;EACJ,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,EAAE;EAC9C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,EAAE;EACpC,MAAM,CAACG,KAAK,EAAEgB,QAAQ,CAAC,GAAGnB,QAAQ,CAChCI,WAAW,CAACC,YAAY,EAAEC,QAAQ,EAAEC,MAAM,CAAC,CAC5C;EACD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAChCE,WAAW,CAACJ,QAAQ,CAACK,KAAK,CAAC,CAAC,CAC7B;EACDF,SAAS,CAAC,MAAM;IACd,MAAMuB,MAAM,GAAGpB,WAAW,CACxBC,YAAY,EACZC,QAAQ,EACRC,MAAM,CACP;IACDY,QAAQ,CAACK,MAAM,CAAC;IAChBD,QAAQ,CAACrB,WAAW,CAACsB,MAAM,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACnB,YAAY,EAAEC,QAAQ,EAAEC,MAAM,CAAC,CAAC;EACpCN,SAAS,CACP,MACEoB,YAAY,CACVvB,QAAQ,CAACgB,IAAI,CAAC,IACXhB,QAAQ,CAACO,YAAY,CAAC,IAAI,CAACP,QAAQ,CAACK,KAAK,CAAE,CAC/C,EACH,CAACW,IAAI,EAAET,YAAY,EAAEF,KAAK,CAAC,CAC5B;EACD,MAAM;IAAEsB,OAAO;IAAEC;EAAM,CAAC,GAAG3B,QAAQ,CAACuB,KAAK,EAAE;IACzCK,SAAS,EAAE;MACTpB,MAAM;MACNJ,KAAK;MACLU;IACF,CAAC;IACDe,WAAW,EAAGC,IAAI,IAAK;MACrB,IAAI,CAACA,IAAI,EAAE;QACT;MACF;MACAb,aAAa,CAACa,IAAI,CAACd,UAAU,CAACe,OAAO,CAAC;MACtCZ,QAAQ,CAACW,IAAI,CAACd,UAAU,CAACE,KAAK,CAAC;IACjC,CAAC;IACDH,IAAI,EAAEM;EACR,CAAC,CAAC;EACF,OAAO;IAAEH,KAAK;IAAEF,UAAU;IAAEU,OAAO;IAAEC;EAAM,CAAC;AAC9C,CAAC;AACD,eAAed,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}