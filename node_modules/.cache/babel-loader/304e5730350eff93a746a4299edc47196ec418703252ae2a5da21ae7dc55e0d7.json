{"ast":null,"code":"import { apolloClient, cache } from '../../src/apollo';\nimport { getValue } from '../../src/lib';\nimport useMutation from '../useMutationFacade';\nimport useCart from '../useCart';\nimport gql from 'graphql-tag';\nexport const createPayment = ({\n  currency,\n  centAmount,\n  method,\n  paymentInterface\n}) => apolloClient.mutate({\n  mutation: gql`\n        mutation createMyPayment($draft: MyPaymentDraft!) {\n          createMyPayment(draft: $draft) {\n            paymentId: id\n            version\n          }\n        }\n      `,\n  variables: {\n    draft: {\n      amountPlanned: {\n        currencyCode: currency,\n        centAmount\n      },\n      paymentMethodInfo: {\n        method,\n        paymentInterface\n      }\n    }\n  }\n}).then(result => ({\n  version: result.data.createMyPayment.version,\n  id: result.data.createMyPayment.paymentId\n}));\nconst create = gql`\n  mutation createCart($draft: MyCartDraft!) {\n    createMyCart(draft: $draft) {\n      cartId: id\n      version\n    }\n  }\n`;\nconst mutation = gql`\n  mutation mutateCart(\n    $actions: [MyCartUpdateAction!]!\n    $version: Long!\n    $id: String!\n  ) {\n    updateMyCart(\n      actions: $actions\n      version: $version\n      id: $id\n    ) {\n      id\n      version\n      lineItems {\n        lineId: id\n        quantity\n      }\n    }\n  }\n`;\nexport const addLineItem = (sku, quantity, channel) => [{\n  addLineItem: {\n    sku,\n    quantity,\n    ...(channel ? {\n      distributionChannel: {\n        id: channel,\n        typeId: 'channel'\n      }\n    } : undefined)\n  }\n}];\nexport const setBillingAddress = address => ({\n  setBillingAddress: {\n    address\n  }\n});\nexport const setShippingAddress = address => ({\n  setShippingAddress: {\n    address\n  }\n});\nexport const createMyOrderFromCart = (id, version) => {\n  return {\n    variables: {\n      id,\n      version\n    },\n    mutation: gql`\n      mutation createOrder($id: String!, $version: Long!) {\n        createMyOrderFromCart(\n          draft: { id: $id, version: $version }\n        ) {\n          cartId: id\n          version\n        }\n      }\n    `\n  };\n};\nexport const changeCartLineItemQuantity = (id, quantity) => [{\n  changeLineItemQuantity: {\n    lineItemId: id,\n    quantity\n  }\n}];\nexport const removeLineItem = lineItemId => [{\n  removeLineItem: {\n    lineItemId\n  }\n}];\nexport const addDiscountCode = code => [{\n  addDiscountCode: {\n    code\n  }\n}];\nexport const removeDiscountCode = id => [{\n  removeDiscountCode: {\n    discountCode: {\n      id,\n      typeId: 'discount-code'\n    }\n  }\n}];\nexport const setShippingMethod = shippingMethodId => [{\n  setShippingMethod: {\n    shippingMethod: {\n      typeId: 'shipping-method',\n      id: shippingMethodId\n    }\n  }\n}];\n\n//this is the React api useQuery(query,options)\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\nconst useCartMutation = ({\n  location,\n  currency\n}) => {\n  const [mutateFunction, {\n    data,\n    loading,\n    error\n  }] = useMutation(mutation);\n  const [createCart] = useMutation(create);\n  const {\n    cart,\n    exist\n  } = useCart();\n  const mutateCart = actions => {\n    return Promise.resolve().then(() => {\n      if (!getValue(exist) === true) {\n        return createCart({\n          variables: {\n            draft: {\n              currency: getValue(currency),\n              country: getValue(location),\n              shippingAddress: {\n                country: getValue(location)\n              }\n            }\n          }\n        }).then(result => ({\n          version: result.data.createMyCart.version,\n          id: result.data.createMyCart.cartId\n        }));\n      }\n      return {\n        version: getValue(cart).version,\n        id: getValue(cart).cartId\n      };\n    }).then(({\n      version,\n      id\n    }) => mutateFunction({\n      variables: {\n        actions,\n        version,\n        id\n      }\n    })).then(result => {\n      if (!result.data.updateMyCart.lineItems.length) {\n        return apolloClient.mutate({\n          mutation: gql`\n              mutation deleteCart(\n                $version: Long!\n                $id: String!\n              ) {\n                deleteMyCart(version: $version, id: $id) {\n                  id\n                }\n              }\n            `,\n          variables: {\n            id: result.data.updateMyCart.id,\n            version: result.data.updateMyCart.version\n          }\n        });\n      }\n      return result;\n    }).then(result => {\n      cache.evict({\n        id: 'activeCart'\n      });\n      cache.gc();\n      return result;\n    });\n  };\n  return {\n    mutateCart,\n    data,\n    loading,\n    error\n  };\n};\nexport default useCartMutation;","map":{"version":3,"names":["apolloClient","cache","getValue","useMutation","useCart","gql","createPayment","currency","centAmount","method","paymentInterface","mutate","mutation","variables","draft","amountPlanned","currencyCode","paymentMethodInfo","then","result","version","data","createMyPayment","id","paymentId","create","addLineItem","sku","quantity","channel","distributionChannel","typeId","undefined","setBillingAddress","address","setShippingAddress","createMyOrderFromCart","changeCartLineItemQuantity","changeLineItemQuantity","lineItemId","removeLineItem","addDiscountCode","code","removeDiscountCode","discountCode","setShippingMethod","shippingMethodId","shippingMethod","useCartMutation","location","mutateFunction","loading","error","createCart","cart","exist","mutateCart","actions","Promise","resolve","country","shippingAddress","createMyCart","cartId","updateMyCart","lineItems","length","evict","gc"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useCartMutation.js"],"sourcesContent":["import { apolloClient, cache } from '../../src/apollo';\r\nimport { getValue } from '../../src/lib';\r\nimport useMutation from '../useMutationFacade';\r\nimport useCart from '../useCart';\r\nimport gql from 'graphql-tag';\r\nexport const createPayment = ({\r\n  currency,\r\n  centAmount,\r\n  method,\r\n  paymentInterface\r\n}) =>\r\n  apolloClient\r\n    .mutate({\r\n      mutation: gql`\r\n        mutation createMyPayment($draft: MyPaymentDraft!) {\r\n          createMyPayment(draft: $draft) {\r\n            paymentId: id\r\n            version\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        draft: {\r\n          amountPlanned: {\r\n            currencyCode: currency,\r\n            centAmount,\r\n          },\r\n          paymentMethodInfo: {\r\n            method,\r\n            paymentInterface\r\n          },\r\n        },\r\n      },\r\n    })\r\n    .then((result) => ({\r\n      version: result.data.createMyPayment.version,\r\n      id: result.data.createMyPayment.paymentId,\r\n    }));\r\n\r\nconst create = gql`\r\n  mutation createCart($draft: MyCartDraft!) {\r\n    createMyCart(draft: $draft) {\r\n      cartId: id\r\n      version\r\n    }\r\n  }\r\n`;\r\nconst mutation = gql`\r\n  mutation mutateCart(\r\n    $actions: [MyCartUpdateAction!]!\r\n    $version: Long!\r\n    $id: String!\r\n  ) {\r\n    updateMyCart(\r\n      actions: $actions\r\n      version: $version\r\n      id: $id\r\n    ) {\r\n      id\r\n      version\r\n      lineItems {\r\n        lineId: id\r\n        quantity\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const addLineItem = (sku, quantity, channel) => [\r\n  {\r\n    addLineItem: {\r\n      sku,\r\n      quantity,\r\n      ...(channel\r\n        ? {\r\n          distributionChannel: {\r\n            id: channel,\r\n            typeId: 'channel',\r\n          },\r\n        }\r\n        : undefined),\r\n    },\r\n  },\r\n];\r\nexport const setBillingAddress = (address) => ({\r\n  setBillingAddress: {\r\n    address,\r\n  },\r\n});\r\nexport const setShippingAddress = (address) => ({\r\n  setShippingAddress: {\r\n    address,\r\n  },\r\n});\r\nexport const createMyOrderFromCart = (id, version) => {\r\n  return {\r\n    variables: {\r\n      id,\r\n      version,\r\n    },\r\n    mutation: gql`\r\n      mutation createOrder($id: String!, $version: Long!) {\r\n        createMyOrderFromCart(\r\n          draft: { id: $id, version: $version }\r\n        ) {\r\n          cartId: id\r\n          version\r\n        }\r\n      }\r\n    `,\r\n  };\r\n};\r\nexport const changeCartLineItemQuantity = (\r\n  id,\r\n  quantity\r\n) => [\r\n    {\r\n      changeLineItemQuantity: { lineItemId: id, quantity },\r\n    },\r\n  ];\r\nexport const removeLineItem = (lineItemId) => [\r\n  {\r\n    removeLineItem: { lineItemId },\r\n  },\r\n];\r\nexport const addDiscountCode = (code) => [\r\n  { addDiscountCode: { code } },\r\n];\r\nexport const removeDiscountCode = (id) => [\r\n  {\r\n    removeDiscountCode: {\r\n      discountCode: { id, typeId: 'discount-code' },\r\n    },\r\n  },\r\n];\r\nexport const setShippingMethod = (shippingMethodId) => [\r\n  {\r\n    setShippingMethod: {\r\n      shippingMethod: {\r\n        typeId: 'shipping-method',\r\n        id: shippingMethodId,\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\n//this is the React api useQuery(query,options)\r\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\r\nconst useCartMutation = ({ location, currency }) => {\r\n  const [mutateFunction, { data, loading, error }] =\r\n    useMutation(mutation);\r\n  const [createCart] = useMutation(create);\r\n  const { cart, exist } = useCart();\r\n  const mutateCart = (actions) => {\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (!getValue(exist) === true) {\r\n          return createCart({\r\n            variables: {\r\n              draft: {\r\n                currency: getValue(currency),\r\n                country: getValue(location),\r\n                shippingAddress: {\r\n                  country: getValue(location),\r\n                },\r\n              },\r\n            },\r\n          }).then((result) => ({\r\n            version: result.data.createMyCart.version,\r\n            id: result.data.createMyCart.cartId,\r\n          }));\r\n        }\r\n        return {\r\n          version: getValue(cart).version,\r\n          id: getValue(cart).cartId,\r\n        };\r\n      })\r\n      .then(({ version, id }) =>\r\n        mutateFunction({\r\n          variables: {\r\n            actions,\r\n            version,\r\n            id,\r\n          },\r\n        })\r\n      )\r\n      .then((result) => {\r\n        if (!result.data.updateMyCart.lineItems.length) {\r\n          return apolloClient.mutate({\r\n            mutation: gql`\r\n              mutation deleteCart(\r\n                $version: Long!\r\n                $id: String!\r\n              ) {\r\n                deleteMyCart(version: $version, id: $id) {\r\n                  id\r\n                }\r\n              }\r\n            `,\r\n            variables: {\r\n              id: result.data.updateMyCart.id,\r\n              version: result.data.updateMyCart.version,\r\n            },\r\n          });\r\n        }\r\n        return result;\r\n      })\r\n      .then((result) => {\r\n        cache.evict({ id: 'activeCart' });\r\n        cache.gc();\r\n        return result;\r\n      });\r\n  };\r\n  return {\r\n    mutateCart,\r\n    data,\r\n    loading,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useCartMutation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}