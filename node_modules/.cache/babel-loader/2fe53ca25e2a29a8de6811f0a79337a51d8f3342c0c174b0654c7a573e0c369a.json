{"ast":null,"code":"import gql from 'graphql-tag';\nimport useQueryFacade from '../useQueryFacade';\nimport { useState, useEffect } from 'react';\nimport { getValue } from '../../src/lib';\nconst query = gql`\n  query Channels($where: String) {\n    channels(where: $where) {\n      results {\n        id\n        name(locale: \"en\")\n        address {\n          streetNumber\n          streetName\n          city\n          state\n          postalCode\n          country\n        }\n        # add customFieldsRaw to the query and get error\n        #   Cannot query field 'customFieldsRaw' on type 'Channel'.\n        #   support: https://jira.commercetools.com/browse/SUPPORT-11327\n        custom {\n          customFieldsRaw {\n            name\n            value\n          }\n        }\n        geoLocation {\n          ... on Point {\n            coordinates\n          }\n        }\n      }\n    }\n  }\n`;\nconst createWhere = (center, searchRadius) => {\n  return `geoLocation within circle(${getValue(center).lng},\n  ${getValue(center).lat},\n  ${(getValue(searchRadius) || 1000000) * 1609.4})\n`;\n};\nfunction useChannels(center, searchRadius) {\n  const [where, setWhere] = useState(createWhere(center, searchRadius));\n  useEffect(() => setWhere(createWhere(center, searchRadius)), [center, searchRadius]);\n  const [channels, setChannels] = useState(null);\n  const {\n    loading,\n    error\n  } = useQueryFacade(query, {\n    variables: {\n      where\n    },\n    onCompleted: data => {\n      if (!data) {\n        return;\n      }\n      setChannels(data.channels.results);\n    }\n  });\n  return {\n    loading,\n    error,\n    channels\n  };\n}\nexport default useChannels;","map":{"version":3,"names":["gql","useQueryFacade","useState","useEffect","getValue","query","createWhere","center","searchRadius","lng","lat","useChannels","where","setWhere","channels","setChannels","loading","error","variables","onCompleted","data","results"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useChannels.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport useQueryFacade from '../useQueryFacade';\r\nimport { useState, useEffect } from 'react';\r\nimport { getValue } from '../../src/lib';\r\n\r\nconst query = gql`\r\n  query Channels($where: String) {\r\n    channels(where: $where) {\r\n      results {\r\n        id\r\n        name(locale: \"en\")\r\n        address {\r\n          streetNumber\r\n          streetName\r\n          city\r\n          state\r\n          postalCode\r\n          country\r\n        }\r\n        # add customFieldsRaw to the query and get error\r\n        #   Cannot query field 'customFieldsRaw' on type 'Channel'.\r\n        #   support: https://jira.commercetools.com/browse/SUPPORT-11327\r\n        custom {\r\n          customFieldsRaw {\r\n            name\r\n            value\r\n          }\r\n        }\r\n        geoLocation {\r\n          ... on Point {\r\n            coordinates\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst createWhere = (center, searchRadius) => {\r\n  return `geoLocation within circle(${getValue(center).lng},\r\n  ${getValue(center).lat},\r\n  ${(getValue(searchRadius) || 1000000) * 1609.4})\r\n`;\r\n};\r\n\r\nfunction useChannels(center, searchRadius) {\r\n  const [where, setWhere] = useState(\r\n    createWhere(center, searchRadius)\r\n  );\r\n  useEffect(\r\n    () => setWhere(createWhere(center, searchRadius)),\r\n    [center, searchRadius]\r\n  );\r\n  const [channels, setChannels] = useState(null);\r\n\r\n  const { loading, error } = useQueryFacade(query, {\r\n    variables: { where },\r\n    onCompleted: (data) => {\r\n      if (!data) {\r\n        return;\r\n      }\r\n      setChannels(data.channels.results);\r\n    },\r\n  });\r\n  return { loading, error, channels };\r\n}\r\nexport default useChannels;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,eAAe;AAExC,MAAMC,KAAK,GAAGL,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,MAAMM,WAAW,GAAG,CAACC,MAAM,EAAEC,YAAY,KAAK;EAC5C,OAAQ,6BAA4BJ,QAAQ,CAACG,MAAM,CAAC,CAACE,GAAI;AAC3D,IAAIL,QAAQ,CAACG,MAAM,CAAC,CAACG,GAAI;AACzB,IAAI,CAACN,QAAQ,CAACI,YAAY,CAAC,IAAI,OAAO,IAAI,MAAO;AACjD,CAAC;AACD,CAAC;AAED,SAASG,WAAW,CAACJ,MAAM,EAAEC,YAAY,EAAE;EACzC,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAChCI,WAAW,CAACC,MAAM,EAAEC,YAAY,CAAC,CAClC;EACDL,SAAS,CACP,MAAMU,QAAQ,CAACP,WAAW,CAACC,MAAM,EAAEC,YAAY,CAAC,CAAC,EACjD,CAACD,MAAM,EAAEC,YAAY,CAAC,CACvB;EACD,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAM;IAAEc,OAAO;IAAEC;EAAM,CAAC,GAAGhB,cAAc,CAACI,KAAK,EAAE;IAC/Ca,SAAS,EAAE;MAAEN;IAAM,CAAC;IACpBO,WAAW,EAAGC,IAAI,IAAK;MACrB,IAAI,CAACA,IAAI,EAAE;QACT;MACF;MACAL,WAAW,CAACK,IAAI,CAACN,QAAQ,CAACO,OAAO,CAAC;IACpC;EACF,CAAC,CAAC;EACF,OAAO;IAAEL,OAAO;IAAEC,KAAK;IAAEH;EAAS,CAAC;AACrC;AACA,eAAeH,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}