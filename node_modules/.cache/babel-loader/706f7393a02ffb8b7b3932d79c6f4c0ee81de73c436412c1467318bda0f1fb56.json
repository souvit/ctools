{"ast":null,"code":"import { onBeforeMount, ref, watch } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { LOCALE, LOCATION } from '../src/constants';\nimport { move } from '../src/lib';\nimport config from '../sunrise.config';\nconst caseCorrected = (value = '', key = 'countries') => {\n  //get case insensitive locale from sunrise config\n  const loc = value.toUpperCase();\n  const [, fromConfig] = Object.keys(config[key])\n  //all locale keys from config in [UPPERCASE,org]\n  .map(key => [key.toUpperCase(), key]).find(([key]) => key === loc) || []; //find the one from url\n  return fromConfig; //return value from config (in correct case)\n};\n\nconst checkParams = (route, router, locale, location) => () => {\n  const {\n    localeFromLocalStorage,\n    localeFromUrl,\n    locationFromLocalStorage,\n    locationFromUrl\n  } = getParams(route);\n  const params = route.params;\n  let newParams = params;\n  if (!locationFromUrl) {\n    const country = locationFromLocalStorage || Object.keys(config.countries)[0];\n    newParams = {\n      ...newParams,\n      country\n    };\n  }\n  if (!localeFromUrl) {\n    const locale = localeFromLocalStorage || Object.keys(config.languages)[0];\n    newParams = {\n      ...newParams,\n      locale\n    };\n  }\n  return Promise.resolve().then(() => {\n    if (params !== newParams) {\n      return move(router, route, newParams, 'replace');\n    }\n  }).then(() => {\n    const {\n      localeFromUrl,\n      locationFromUrl\n    } = getParams(route);\n    locale.value = localeFromUrl;\n    location.value = locationFromUrl;\n    localStorage.setItem(LOCATION, locationFromUrl);\n    localStorage.setItem(LOCALE, localeFromUrl);\n  });\n};\nconst getParams = route => {\n  const localeFromLocalStorage = caseCorrected(localStorage.getItem(LOCALE) || undefined, 'languages');\n  const locationFromLocalStorage = caseCorrected(localStorage.getItem(LOCATION) || undefined);\n  const localeFromUrl = caseCorrected(route.params.locale, 'languages');\n  const locationFromUrl = caseCorrected(route.params.country);\n  return {\n    localeFromLocalStorage,\n    localeFromUrl,\n    locationFromLocalStorage,\n    locationFromUrl\n  };\n};\nconst useDefaultRouteParams = () => {\n  const locale = ref();\n  const location = ref();\n  const route = useRoute();\n  const router = useRouter();\n  watch(() => [route.params.country, route.params.locale], checkParams(route, router, locale, location));\n  onBeforeMount(checkParams(route, router, locale, location));\n  const setLocale = locale => move(router, route, {\n    ...route.params,\n    locale: caseCorrected(locale, 'languages')\n  }, 'push');\n  const setLocation = location => move(router, route, {\n    ...route.params,\n    country: caseCorrected(location)\n  }, 'push');\n  return {\n    locale,\n    location,\n    setLocale,\n    setLocation\n  };\n};\nexport default useDefaultRouteParams;","map":{"version":3,"names":["onBeforeMount","ref","watch","useRoute","useRouter","LOCALE","LOCATION","move","config","caseCorrected","value","key","loc","toUpperCase","fromConfig","Object","keys","map","find","checkParams","route","router","locale","location","localeFromLocalStorage","localeFromUrl","locationFromLocalStorage","locationFromUrl","getParams","params","newParams","country","countries","languages","Promise","resolve","then","localStorage","setItem","getItem","undefined","useDefaultRouteParams","setLocale","setLocation"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/useDefaultRouteParams.js"],"sourcesContent":["import { onBeforeMount, ref, watch } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { LOCALE, LOCATION } from '../src/constants';\r\nimport { move } from '../src/lib';\r\nimport config from '../sunrise.config';\r\n\r\nconst caseCorrected = (value = '', key = 'countries') => {\r\n  //get case insensitive locale from sunrise config\r\n  const loc = value.toUpperCase();\r\n  const [, fromConfig] =\r\n    Object.keys(config[key])\r\n      //all locale keys from config in [UPPERCASE,org]\r\n      .map((key) => [key.toUpperCase(), key])\r\n      .find(([key]) => key === loc) || []; //find the one from url\r\n  return fromConfig; //return value from config (in correct case)\r\n};\r\nconst checkParams =\r\n  (route, router, locale, location) => () => {\r\n    const {\r\n      localeFromLocalStorage,\r\n      localeFromUrl,\r\n      locationFromLocalStorage,\r\n      locationFromUrl,\r\n    } = getParams(route);\r\n    const params = route.params;\r\n    let newParams = params;\r\n    if (!locationFromUrl) {\r\n      const country =\r\n        locationFromLocalStorage ||\r\n        Object.keys(config.countries)[0];\r\n      newParams = {\r\n        ...newParams,\r\n        country,\r\n      };\r\n    }\r\n    if (!localeFromUrl) {\r\n      const locale =\r\n        localeFromLocalStorage ||\r\n        Object.keys(config.languages)[0];\r\n      newParams = {\r\n        ...newParams,\r\n        locale,\r\n      };\r\n    }\r\n    return Promise.resolve()\r\n      .then(() => {\r\n        if (params !== newParams) {\r\n          return move(router, route, newParams, 'replace');\r\n        }\r\n      })\r\n      .then(() => {\r\n        const { localeFromUrl, locationFromUrl } =\r\n          getParams(route);\r\n        locale.value = localeFromUrl;\r\n        location.value = locationFromUrl;\r\n        localStorage.setItem(LOCATION, locationFromUrl);\r\n        localStorage.setItem(LOCALE, localeFromUrl);\r\n      });\r\n  };\r\nconst getParams = (route) => {\r\n  const localeFromLocalStorage = caseCorrected(\r\n    localStorage.getItem(LOCALE) || undefined,\r\n    'languages'\r\n  );\r\n  const locationFromLocalStorage = caseCorrected(\r\n    localStorage.getItem(LOCATION) || undefined\r\n  );\r\n  const localeFromUrl = caseCorrected(\r\n    route.params.locale,\r\n    'languages'\r\n  );\r\n  const locationFromUrl = caseCorrected(\r\n    route.params.country\r\n  );\r\n  return {\r\n    localeFromLocalStorage,\r\n    localeFromUrl,\r\n    locationFromLocalStorage,\r\n    locationFromUrl,\r\n  };\r\n};\r\nconst useDefaultRouteParams = () => {\r\n  const locale = ref();\r\n  const location = ref();\r\n  const route = useRoute();\r\n  const router = useRouter();\r\n  watch(\r\n    () => [route.params.country, route.params.locale],\r\n    checkParams(route, router, locale, location)\r\n  );\r\n  onBeforeMount(\r\n    checkParams(route, router, locale, location)\r\n  );\r\n  const setLocale = (locale) =>\r\n    move(\r\n      router,\r\n      route,\r\n      {\r\n        ...route.params,\r\n        locale: caseCorrected(locale, 'languages'),\r\n      },\r\n      'push'\r\n    );\r\n  const setLocation = (location) =>\r\n    move(\r\n      router,\r\n      route,\r\n      {\r\n        ...route.params,\r\n        country: caseCorrected(location),\r\n      },\r\n      'push'\r\n    );\r\n  return {\r\n    locale,\r\n    location,\r\n    setLocale,\r\n    setLocation,\r\n  };\r\n};\r\nexport default useDefaultRouteParams;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}