{"ast":null,"code":"import gql from 'graphql-tag';\nimport { apolloClient } from '../../src/apollo';\nimport useMyOrder from 'hooks/useMyOrder';\nimport useMyOrders from 'hooks/useMyOrders';\nexport const loginVars = (email, password) => ({\n  draft: {\n    email,\n    password\n  }\n});\nconst customerFields = `\ncustomerId: id\ncustom {\n  customFieldsRaw {\n    name\n    value\n  }\n}\nversion\nemail\nfirstName\nlastName\nversion\ncustomerNumber\t\t\ncustomerGroupRef {\n  customerGroupId: id\n}\n`;\nconst createResetToken = email => apolloClient.mutate({\n  mutation: gql`\n      mutation createResetToken($email: String!) {\n        customerCreatePasswordResetToken(email: $email) {\n          value\n        }\n      }\n    `,\n  variables: {\n    email\n  }\n});\nconst returnItems = (id, version, items) => {\n  return apolloClient.mutate({\n    mutation: gql`\n      mutation returnItems(\n        $id: String\n        $version: Long!\n        $items: [ReturnItemDraftType!]!\n      ) {\n        updateOrder(\n          version: $version\n          id: $id\n          actions: { addReturnInfo: { items: $items } }\n        ) {\n          orderNumber\n        }\n      }\n    `,\n    variables: {\n      id,\n      version,\n      items: items.map(item => ({\n        ...item,\n        shipmentState: 'Returned'\n      }))\n    }\n  });\n};\nconst resetPassword = ({\n  token,\n  newPassword\n}) => apolloClient.mutate({\n  mutation: gql`\n      mutation resetPassword(\n        $tokenValue: String!\n        $newPassword: String!\n      ) {\n        customerResetPassword(\n          tokenValue: $tokenValue\n          newPassword: $newPassword\n        ) {\n          firstName\n        }\n      }\n    `,\n  variables: {\n    tokenValue: token,\n    newPassword\n  }\n});\nconst signup = form => {\n  return apolloClient.mutate({\n    mutation: gql`\n      mutation customerSignMeUp(\n        $draft: CustomerSignMeUpDraft!\n      ) {\n        customerSignMeUp(draft: $draft) {\n          customer {\n            ${customerFields}\n          }\n        }\n      }\n    `,\n    variables: {\n      draft: {\n        email: form.email,\n        password: form.password,\n        firstName: form.firstName,\n        lastName: form.lastName\n      }\n    }\n  });\n};\nconst refreshUser = () => apolloClient.query({\n  fetchPolicy: 'network-only',\n  query: gql`\n      query queryMyCustomer {\n        me {\n          customer {\n            ${customerFields}\n          }\n        }\n      }\n    `\n});\nconst updateUser = ({\n  version,\n  firstName,\n  lastName,\n  email\n}) => apolloClient.mutate({\n  mutation: gql`\n      mutation updateMyCustomer(\n        $actions: [MyCustomerUpdateAction!]!\n        $version: Long!\n      ) {\n        updateMyCustomer(\n          version: $version\n          actions: $actions\n        ) {\n          ${customerFields}\n        }\n      }\n    `,\n  variables: {\n    version,\n    actions: [{\n      changeEmail: {\n        email\n      }\n    }, {\n      setFirstName: {\n        firstName\n      }\n    }, {\n      setLastName: {\n        lastName\n      }\n    }]\n  }\n});\nconst login = (email, password) => apolloClient.mutate({\n  mutation: gql`\n      mutation customerSignMeIn(\n        $draft: CustomerSignMeInDraft!\n      ) {\n        customerSignMeIn(draft: $draft) {\n          customer {\n            ${customerFields}\n          }\n        }\n      }\n    `,\n  variables: loginVars(email, password)\n});\nconst updateMyCustomerPassword = ({\n  currentPassword,\n  newPassword,\n  version\n}) => {\n  return apolloClient.mutate({\n    mutation: gql`\n      mutation changePassword(\n        $version: Long!\n        $currentPassword: String!\n        $newPassword: String!\n      ) {\n        customerChangeMyPassword(\n          version: $version\n          currentPassword: $currentPassword\n          newPassword: $newPassword\n        ) {\n          ${customerFields}\n        }\n      }\n    `,\n    variables: {\n      version,\n      currentPassword,\n      newPassword\n    }\n  });\n};\nexport default {\n  signup,\n  updateUser,\n  createResetToken,\n  resetPassword,\n  useMyOrders,\n  useMyOrder,\n  returnItems,\n  updateMyCustomerPassword,\n  login,\n  refreshUser\n};","map":{"version":3,"names":["gql","apolloClient","useMyOrder","useMyOrders","loginVars","email","password","draft","customerFields","createResetToken","mutate","mutation","variables","returnItems","id","version","items","map","item","shipmentState","resetPassword","token","newPassword","tokenValue","signup","form","firstName","lastName","refreshUser","query","fetchPolicy","updateUser","actions","changeEmail","setFirstName","setLastName","login","updateMyCustomerPassword","currentPassword"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useCustomerTools.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport { apolloClient } from '../../src/apollo';\r\nimport useMyOrder from 'hooks/useMyOrder';\r\nimport useMyOrders from 'hooks/useMyOrders';\r\nexport const loginVars = (email, password) => ({\r\n  draft: {\r\n    email,\r\n    password,\r\n  },\r\n});\r\nconst customerFields = `\r\ncustomerId: id\r\ncustom {\r\n  customFieldsRaw {\r\n    name\r\n    value\r\n  }\r\n}\r\nversion\r\nemail\r\nfirstName\r\nlastName\r\nversion\r\ncustomerNumber\t\t\r\ncustomerGroupRef {\r\n  customerGroupId: id\r\n}\r\n`;\r\nconst createResetToken = (email) =>\r\n  apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation createResetToken($email: String!) {\r\n        customerCreatePasswordResetToken(email: $email) {\r\n          value\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      email,\r\n    },\r\n  });\r\nconst returnItems = (id, version, items) => {\r\n  return apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation returnItems(\r\n        $id: String\r\n        $version: Long!\r\n        $items: [ReturnItemDraftType!]!\r\n      ) {\r\n        updateOrder(\r\n          version: $version\r\n          id: $id\r\n          actions: { addReturnInfo: { items: $items } }\r\n        ) {\r\n          orderNumber\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      id,\r\n      version,\r\n      items: items.map((item) => ({\r\n        ...item,\r\n        shipmentState: 'Returned',\r\n      })),\r\n    },\r\n  });\r\n};\r\nconst resetPassword = ({ token, newPassword }) =>\r\n  apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation resetPassword(\r\n        $tokenValue: String!\r\n        $newPassword: String!\r\n      ) {\r\n        customerResetPassword(\r\n          tokenValue: $tokenValue\r\n          newPassword: $newPassword\r\n        ) {\r\n          firstName\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      tokenValue: token,\r\n      newPassword,\r\n    },\r\n  });\r\nconst signup = (form) => {\r\n  return apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation customerSignMeUp(\r\n        $draft: CustomerSignMeUpDraft!\r\n      ) {\r\n        customerSignMeUp(draft: $draft) {\r\n          customer {\r\n            ${customerFields}\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      draft: {\r\n        email: form.email,\r\n        password: form.password,\r\n        firstName: form.firstName,\r\n        lastName: form.lastName,\r\n      },\r\n    },\r\n  });\r\n};\r\nconst refreshUser = () =>\r\n  apolloClient.query({\r\n    fetchPolicy: 'network-only',\r\n    query: gql`\r\n      query queryMyCustomer {\r\n        me {\r\n          customer {\r\n            ${customerFields}\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  });\r\nconst updateUser = ({\r\n  version,\r\n  firstName,\r\n  lastName,\r\n  email,\r\n}) =>\r\n  apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation updateMyCustomer(\r\n        $actions: [MyCustomerUpdateAction!]!\r\n        $version: Long!\r\n      ) {\r\n        updateMyCustomer(\r\n          version: $version\r\n          actions: $actions\r\n        ) {\r\n          ${customerFields}\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      version,\r\n      actions: [\r\n        { changeEmail: { email } },\r\n        { setFirstName: { firstName } },\r\n        { setLastName: { lastName } },\r\n      ],\r\n    },\r\n  });\r\nconst login = (email, password) =>\r\n  apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation customerSignMeIn(\r\n        $draft: CustomerSignMeInDraft!\r\n      ) {\r\n        customerSignMeIn(draft: $draft) {\r\n          customer {\r\n            ${customerFields}\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    variables: loginVars(email, password),\r\n  });\r\nconst updateMyCustomerPassword = ({\r\n  currentPassword,\r\n  newPassword,\r\n  version,\r\n}) => {\r\n  return apolloClient.mutate({\r\n    mutation: gql`\r\n      mutation changePassword(\r\n        $version: Long!\r\n        $currentPassword: String!\r\n        $newPassword: String!\r\n      ) {\r\n        customerChangeMyPassword(\r\n          version: $version\r\n          currentPassword: $currentPassword\r\n          newPassword: $newPassword\r\n        ) {\r\n          ${customerFields}\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      version,\r\n      currentPassword,\r\n      newPassword,\r\n    },\r\n  });\r\n};\r\n\r\nexport default {\r\n  signup,\r\n  updateUser,\r\n  createResetToken,\r\n  resetPassword,\r\n  useMyOrders,\r\n  useMyOrder,\r\n  returnItems,\r\n  updateMyCustomerPassword,\r\n  login,\r\n  refreshUser,\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAK,EAAEC,QAAQ,MAAM;EAC7CC,KAAK,EAAE;IACLF,KAAK;IACLC;EACF;AACF,CAAC,CAAC;AACF,MAAME,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,MAAMC,gBAAgB,GAAIJ,KAAK,IAC7BJ,YAAY,CAACS,MAAM,CAAC;EAClBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;EACDY,SAAS,EAAE;IACTP;EACF;AACF,CAAC,CAAC;AACJ,MAAMQ,WAAW,GAAG,CAACC,EAAE,EAAEC,OAAO,EAAEC,KAAK,KAAK;EAC1C,OAAOf,YAAY,CAACS,MAAM,CAAC;IACzBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDY,SAAS,EAAE;MACTE,EAAE;MACFC,OAAO;MACPC,KAAK,EAAEA,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;QAC1B,GAAGA,IAAI;QACPC,aAAa,EAAE;MACjB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC;AACD,MAAMC,aAAa,GAAG,CAAC;EAAEC,KAAK;EAAEC;AAAY,CAAC,KAC3CrB,YAAY,CAACS,MAAM,CAAC;EAClBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDY,SAAS,EAAE;IACTW,UAAU,EAAEF,KAAK;IACjBC;EACF;AACF,CAAC,CAAC;AACJ,MAAME,MAAM,GAAIC,IAAI,IAAK;EACvB,OAAOxB,YAAY,CAACS,MAAM,CAAC;IACzBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA,cAAcQ,cAAe;AAC7B;AACA;AACA;AACA,KAAK;IACDI,SAAS,EAAE;MACTL,KAAK,EAAE;QACLF,KAAK,EAAEoB,IAAI,CAACpB,KAAK;QACjBC,QAAQ,EAAEmB,IAAI,CAACnB,QAAQ;QACvBoB,SAAS,EAAED,IAAI,CAACC,SAAS;QACzBC,QAAQ,EAAEF,IAAI,CAACE;MACjB;IACF;EACF,CAAC,CAAC;AACJ,CAAC;AACD,MAAMC,WAAW,GAAG,MAClB3B,YAAY,CAAC4B,KAAK,CAAC;EACjBC,WAAW,EAAE,cAAc;EAC3BD,KAAK,EAAE7B,GAAI;AACf;AACA;AACA;AACA,cAAcQ,cAAe;AAC7B;AACA;AACA;AACA;AACE,CAAC,CAAC;AACJ,MAAMuB,UAAU,GAAG,CAAC;EAClBhB,OAAO;EACPW,SAAS;EACTC,QAAQ;EACRtB;AACF,CAAC,KACCJ,YAAY,CAACS,MAAM,CAAC;EAClBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYQ,cAAe;AAC3B;AACA;AACA,KAAK;EACDI,SAAS,EAAE;IACTG,OAAO;IACPiB,OAAO,EAAE,CACP;MAAEC,WAAW,EAAE;QAAE5B;MAAM;IAAE,CAAC,EAC1B;MAAE6B,YAAY,EAAE;QAAER;MAAU;IAAE,CAAC,EAC/B;MAAES,WAAW,EAAE;QAAER;MAAS;IAAE,CAAC;EAEjC;AACF,CAAC,CAAC;AACJ,MAAMS,KAAK,GAAG,CAAC/B,KAAK,EAAEC,QAAQ,KAC5BL,YAAY,CAACS,MAAM,CAAC;EAClBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA,cAAcQ,cAAe;AAC7B;AACA;AACA;AACA,KAAK;EACDI,SAAS,EAAER,SAAS,CAACC,KAAK,EAAEC,QAAQ;AACtC,CAAC,CAAC;AACJ,MAAM+B,wBAAwB,GAAG,CAAC;EAChCC,eAAe;EACfhB,WAAW;EACXP;AACF,CAAC,KAAK;EACJ,OAAOd,YAAY,CAACS,MAAM,CAAC;IACzBC,QAAQ,EAAEX,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYQ,cAAe;AAC3B;AACA;AACA,KAAK;IACDI,SAAS,EAAE;MACTG,OAAO;MACPuB,eAAe;MACfhB;IACF;EACF,CAAC,CAAC;AACJ,CAAC;AAED,eAAe;EACbE,MAAM;EACNO,UAAU;EACVtB,gBAAgB;EAChBW,aAAa;EACbjB,WAAW;EACXD,UAAU;EACVW,WAAW;EACXwB,wBAAwB;EACxBD,KAAK;EACLR;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}