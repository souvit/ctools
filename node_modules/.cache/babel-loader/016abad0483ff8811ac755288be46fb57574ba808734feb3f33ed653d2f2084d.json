{"ast":null,"code":"import { shallowRef } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport translation from './StoreLocator.json';\nimport useChannels from 'hooks/useChannels';\nimport useSelectedChannel from 'hooks/useSelectedChannel';\nconst getCoordinates = ({\n  lat,\n  lng\n}) => ({\n  lat: parseFloat(lat),\n  lng: parseFloat(lng)\n});\nconst getLocationFromPlace = p => getCoordinates({\n  lat: p.geometry.location.lat(),\n  lng: p.geometry.location.lng()\n});\nconst getLocationFromChannel = c => getCoordinates({\n  lat: c.geoLocation.coordinates[1],\n  lng: c.geoLocation.coordinates[0]\n});\nfunction haversineDistance(mk1, mk2) {\n  const R = 3958.8; // Radius of the Earth in miles\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\n\n  const d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}\nfunction initialLocation(channel) {\n  const [lng = 10.0015642, lat = 53.5512179] = channel.value?.geoLocation?.coordinates || [];\n  return {\n    lat,\n    lng\n  };\n}\nexport default {\n  name: 'StoreLocator',\n  setup() {\n    const {\n      t\n    } = useI18n({\n      messages: translation\n    });\n    const {\n      channel,\n      setChannel\n    } = useSelectedChannel();\n    const center = shallowRef(initialLocation(channel));\n    const radiusOptions = [{\n      distance: 25,\n      label: '25 mi'\n    }, {\n      distance: 50,\n      label: '50 mi'\n    }, {\n      distance: 100,\n      label: '100 mi'\n    }, {\n      distance: 500,\n      label: '500 mi'\n    }, {\n      distance: 1000,\n      label: '1000 mi'\n    }, {\n      distance: 3000,\n      label: '3000 mi'\n    }];\n    const searchRadius = shallowRef(radiusOptions[0].distance);\n    const {\n      channels,\n      loading\n    } = useChannels(center, searchRadius);\n    function setPlace(place) {\n      center.value = getLocationFromPlace(place);\n    }\n    function distance(channel) {\n      return haversineDistance(this.center, getLocationFromChannel(channel)).toFixed(2);\n    }\n    function openingHours(channel) {\n      const field = (channel?.custom?.customFieldsRaw || []).find(({\n        name\n      }) => name === 'openingTimes');\n      const hours = field && field.value && field.value.en;\n      return hours;\n    }\n    function isSelected(c) {\n      return channel.value?.name === c.name;\n    }\n    function setStore(channel) {\n      setChannel(channel);\n    }\n    function unsetStore() {\n      setChannel(null);\n    }\n    function click(channel) {\n      const [lng, lat] = channel.geoLocation.coordinates;\n      center.value = {\n        lat,\n        lng\n      };\n    }\n    return {\n      click,\n      setPlace,\n      center,\n      radiusOptions,\n      searchRadius,\n      loading,\n      channels,\n      distance,\n      isSelected,\n      setStore,\n      unsetStore,\n      openingHours,\n      t\n    };\n  }\n};","map":{"version":3,"names":["shallowRef","useI18n","translation","useChannels","useSelectedChannel","getCoordinates","lat","lng","parseFloat","getLocationFromPlace","p","geometry","location","getLocationFromChannel","c","geoLocation","coordinates","haversineDistance","mk1","mk2","R","rlat1","Math","PI","rlat2","difflat","difflon","d","asin","sqrt","sin","cos","initialLocation","channel","value","name","setup","t","messages","setChannel","center","radiusOptions","distance","label","searchRadius","channels","loading","setPlace","place","toFixed","openingHours","field","custom","customFieldsRaw","find","hours","en","isSelected","setStore","unsetStore","click"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/src/presentation/fashion/Stores/StoreLocator.js"],"sourcesContent":["import { shallowRef } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport translation from './StoreLocator.json'\r\nimport useChannels from 'hooks/useChannels';\r\nimport useSelectedChannel from 'hooks/useSelectedChannel';\r\nconst getCoordinates = ({ lat, lng }) => ({\r\n  lat: parseFloat(lat),\r\n  lng: parseFloat(lng),\r\n});\r\n\r\nconst getLocationFromPlace = (p) =>\r\n  getCoordinates({\r\n    lat: p.geometry.location.lat(),\r\n    lng: p.geometry.location.lng(),\r\n  });\r\n\r\nconst getLocationFromChannel = (c) =>\r\n  getCoordinates({\r\n    lat: c.geoLocation.coordinates[1],\r\n    lng: c.geoLocation.coordinates[0],\r\n  });\r\nfunction haversineDistance(mk1, mk2) {\r\n  const R = 3958.8; // Radius of the Earth in miles\r\n  const rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\r\n  const rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\r\n  const difflat = rlat2 - rlat1; // Radian difference (latitudes)\r\n  const difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\r\n\r\n  const d =\r\n    2 *\r\n    R *\r\n    Math.asin(\r\n      Math.sqrt(\r\n        Math.sin(difflat / 2) * Math.sin(difflat / 2) +\r\n        Math.cos(rlat1) *\r\n        Math.cos(rlat2) *\r\n        Math.sin(difflon / 2) *\r\n        Math.sin(difflon / 2)\r\n      )\r\n    );\r\n  return d;\r\n}\r\nfunction initialLocation(channel) {\r\n  const [lng = 10.0015642, lat = 53.5512179] =\r\n    channel.value?.geoLocation?.coordinates || [];\r\n  return { lat, lng };\r\n}\r\nexport default {\r\n  name: 'StoreLocator',\r\n  setup() {\r\n    const { t } = useI18n({\r\n      messages: translation\r\n    });\r\n    const { channel, setChannel } = useSelectedChannel();\r\n    const center = shallowRef(initialLocation(channel));\r\n    const radiusOptions = [\r\n      {\r\n        distance: 25,\r\n        label: '25 mi',\r\n      },\r\n      {\r\n        distance: 50,\r\n        label: '50 mi',\r\n      },\r\n      {\r\n        distance: 100,\r\n        label: '100 mi',\r\n      },\r\n      {\r\n        distance: 500,\r\n        label: '500 mi',\r\n      },\r\n      {\r\n        distance: 1000,\r\n        label: '1000 mi',\r\n      },\r\n      {\r\n        distance: 3000,\r\n        label: '3000 mi',\r\n      },\r\n    ];\r\n    const searchRadius = shallowRef(\r\n      radiusOptions[0].distance\r\n    );\r\n    const { channels, loading } = useChannels(\r\n      center,\r\n      searchRadius\r\n    );\r\n    function setPlace(place) {\r\n      center.value = getLocationFromPlace(place);\r\n    }\r\n    function distance(channel) {\r\n      return haversineDistance(\r\n        this.center,\r\n        getLocationFromChannel(channel)\r\n      ).toFixed(2);\r\n    }\r\n    function openingHours(channel) {\r\n      const field = (\r\n        channel?.custom?.customFieldsRaw || []\r\n      ).find(({ name }) => name === 'openingTimes');\r\n      const hours = field && field.value && field.value.en;\r\n      return hours;\r\n    }\r\n    function isSelected(c) {\r\n      return channel.value?.name === c.name;\r\n    }\r\n    function setStore(channel) {\r\n      setChannel(channel);\r\n    }\r\n    function unsetStore() {\r\n      setChannel(null);\r\n    }\r\n    function click(channel) {\r\n      const [lng, lat] = channel.geoLocation.coordinates;\r\n      center.value = { lat, lng };\r\n    }\r\n    return {\r\n      click,\r\n      setPlace,\r\n      center,\r\n      radiusOptions,\r\n      searchRadius,\r\n      loading,\r\n      channels,\r\n      distance,\r\n      isSelected,\r\n      setStore,\r\n      unsetStore,\r\n      openingHours,\r\n      t,\r\n    };\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}