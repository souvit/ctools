{"ast":null,"code":"import { computed } from 'vue';\nimport config from '../sunrise.config';\nimport useCart from './useCart';\nfunction useAccessRules() {\n  const {\n    cart\n  } = useCart();\n  const showStoreSelector = computed(() => {\n    /**\r\n     * To get channels the scope view_products is needed\r\n     * This is a security risk because all clients can see unpublished products\r\n     * If you want to select stores then you have to use a proxy or BFF or\r\n     * run the risk of clients hacking access to unpublished products\r\n     **/\n    return cart.value === null && (config.ct.auth.scope.includes('view_products') || config.ct.auth.scope.includes('manage_project'));\n  });\n  const showLocationSelector = computed(() => cart.value === null);\n  const showReturnItemButton = computed(() => {\n    /**\r\n     * To return an item you need to update the order, there is no update my order scope\r\n     * so to return an item you need access to all orders, including orders that are not\r\n     * yours. So to return an item you need to implement it with proxy or BFF that\r\n     * checks ownership of the order\r\n     */\n    return config.ct.auth.scope.includes('manage_orders') || config.ct.auth.scope.includes('manage_project');\n  });\n  const showResetPassword = computed(() => {\n    /**\r\n     * To request a reset password token you need manage_customers this is done\r\n     * through a proxy or BFF that will email that token, sunrise is connecting\r\n     * directly to commercetools so if you want this to work you need the client\r\n     * to have manage_customers scope. Do not do this in production, this is only\r\n     * for demo purposes\r\n     */\n    return config.ct.auth.scope.includes('manage_customers') || config.ct.auth.scope.includes('manage_project');\n  });\n  return {\n    showResetPassword,\n    showStoreSelector,\n    showLocationSelector,\n    showReturnItemButton\n  };\n}\nexport default useAccessRules;","map":{"version":3,"names":["computed","config","useCart","useAccessRules","cart","showStoreSelector","value","ct","auth","scope","includes","showLocationSelector","showReturnItemButton","showResetPassword"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/useAccessRules.js"],"sourcesContent":["import { computed } from 'vue';\r\nimport config from '../sunrise.config';\r\nimport useCart from './useCart';\r\n\r\nfunction useAccessRules() {\r\n  const { cart } = useCart();\r\n  const showStoreSelector = computed(() => {\r\n    /**\r\n     * To get channels the scope view_products is needed\r\n     * This is a security risk because all clients can see unpublished products\r\n     * If you want to select stores then you have to use a proxy or BFF or\r\n     * run the risk of clients hacking access to unpublished products\r\n     **/\r\n    return (\r\n      cart.value === null &&\r\n      (config.ct.auth.scope.includes('view_products') ||\r\n        config.ct.auth.scope.includes('manage_project'))\r\n    );\r\n  });\r\n  const showLocationSelector = computed(\r\n    () => cart.value === null\r\n  );\r\n  const showReturnItemButton = computed(() => {\r\n    /**\r\n     * To return an item you need to update the order, there is no update my order scope\r\n     * so to return an item you need access to all orders, including orders that are not\r\n     * yours. So to return an item you need to implement it with proxy or BFF that\r\n     * checks ownership of the order\r\n     */\r\n    return (\r\n      config.ct.auth.scope.includes('manage_orders') ||\r\n      config.ct.auth.scope.includes('manage_project')\r\n    );\r\n  });\r\n  const showResetPassword = computed(() => {\r\n    /**\r\n     * To request a reset password token you need manage_customers this is done\r\n     * through a proxy or BFF that will email that token, sunrise is connecting\r\n     * directly to commercetools so if you want this to work you need the client\r\n     * to have manage_customers scope. Do not do this in production, this is only\r\n     * for demo purposes\r\n     */\r\n    return (\r\n      config.ct.auth.scope.includes('manage_customers') ||\r\n      config.ct.auth.scope.includes('manage_project')\r\n    );\r\n  });\r\n  return {\r\n    showResetPassword,\r\n    showStoreSelector,\r\n    showLocationSelector,\r\n    showReturnItemButton,\r\n  };\r\n}\r\nexport default useAccessRules;\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,KAAK;AAC9B,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,OAAO,MAAM,WAAW;AAE/B,SAASC,cAAc,GAAG;EACxB,MAAM;IAAEC;EAAK,CAAC,GAAGF,OAAO,EAAE;EAC1B,MAAMG,iBAAiB,GAAGL,QAAQ,CAAC,MAAM;IACvC;AACJ;AACA;AACA;AACA;AACA;IACI,OACEI,IAAI,CAACE,KAAK,KAAK,IAAI,KAClBL,MAAM,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,eAAe,CAAC,IAC7CT,MAAM,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;EAEtD,CAAC,CAAC;EACF,MAAMC,oBAAoB,GAAGX,QAAQ,CACnC,MAAMI,IAAI,CAACE,KAAK,KAAK,IAAI,CAC1B;EACD,MAAMM,oBAAoB,GAAGZ,QAAQ,CAAC,MAAM;IAC1C;AACJ;AACA;AACA;AACA;AACA;IACI,OACEC,MAAM,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,eAAe,CAAC,IAC9CT,MAAM,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EAEnD,CAAC,CAAC;EACF,MAAMG,iBAAiB,GAAGb,QAAQ,CAAC,MAAM;IACvC;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,OACEC,MAAM,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,kBAAkB,CAAC,IACjDT,MAAM,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EAEnD,CAAC,CAAC;EACF,OAAO;IACLG,iBAAiB;IACjBR,iBAAiB;IACjBM,oBAAoB;IACpBC;EACF,CAAC;AACH;AACA,eAAeT,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}