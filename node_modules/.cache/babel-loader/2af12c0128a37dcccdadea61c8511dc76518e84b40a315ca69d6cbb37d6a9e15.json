{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5cc4ce30\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"payment-page\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = {\n  class: \"payment-container\"\n};\nconst _hoisted_4 = {\n  class: \"payment\",\n  ref: \"payElementRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, null, 512)])])])]);\n}","map":{"version":3,"mappings":";;;EAEaA,EAAE,EAAC;AAAc;;EACbC,KAAK,EAAC;AAAW;;EACbA,KAAK,EAAC;AAAmB;;EACrBA,KAAK,EAAC,SAAS;EAACC,GAAG,EAAC;;;uBAJzCC,oBAQM,cAPFC,oBAMM,OANNC,UAMM,GALFD,oBAIM,OAJNE,UAIM,GAHFF,oBAEM,OAFNG,UAEM,GADFH,oBAA+C,OAA/CI,UAA+C","names":["id","class","ref","_createElementBlock","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4"],"sourceRoot":"","sources":["/Users/souvitroy/Downloads/commercetools/ctools/src/presentation/fashion/PageCheckout/Payment/Payment.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div id=\"payment-page\">\r\n            <div class=\"container\">\r\n                <div class=\"payment-container\">\r\n                    <div class=\"payment\" ref=\"payElementRef\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script >\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nimport '@adyen/adyen-web/dist/adyen.css';\r\nlet AdyenCheckout;\r\nAdyenCheckout = require(\"@adyen/adyen-web\");\r\n\r\nexport default {\r\n    props: {\r\n        amount: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, { emit }) {\r\n        const sessionId = ref(\"\");\r\n        const redirectResult = ref(\"\");\r\n        const pspRef = ref(\"\");\r\n        const payType = \"dropin\";\r\n        const payElementRef = ref(null);\r\n        const payMethodData = ref(null);\r\n        const cartAmount = computed(() => props.amount);\r\n\r\n        onMounted(async () => {\r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            sessionId.value = urlParams.get('sessionId');\r\n            redirectResult.value = urlParams.get('redirectResult');\r\n\r\n            if (sessionId.value) {\r\n                // found session: finalize checkout\r\n                await finalizeCheckout();\r\n            } else {\r\n                // no session: init checkout\r\n                await startCheckout();\r\n            }\r\n        });\r\n\r\n\r\n\r\n        const startCheckout = async () => {\r\n            try {\r\n                // Initiate Sessions\r\n                const { response, clientKey } = await callServer(\r\n                    \"/api/sessions?type=\" + payType,\r\n                    {\r\n                        amount: cartAmount.value.centAmount\r\n                    }\r\n                );\r\n\r\n\r\n\r\n                // Create AdyenCheckout using Sessions response\r\n                const checkout = await createAdyenCheckout(response, clientKey);\r\n\r\n                // Create an instance of Drop-in and mount it\r\n                checkout.create(payType).mount(payElementRef.value);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                alert(\"Error occurred. Look at console for details\");\r\n            }\r\n        }\r\n\r\n        const finalizeCheckout = async () => {\r\n            try {\r\n                // Create AdyenCheckout re-using existing Session\r\n                const checkout = await createAdyenCheckout({ id: sessionId.value });\r\n\r\n                // Submit the extracted redirectResult (to trigger onPaymentCompleted() handler)\r\n                checkout.submitDetails({ details: redirectResult.value });\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                alert(\"Error occurred. Look at console for details\");\r\n            }\r\n        }\r\n\r\n        const createAdyenCheckout = async (session, clientKey) => {\r\n            pspRef.value = session.reference;\r\n            const configuration = {\r\n                clientKey: clientKey,\r\n                locale: \"en_US\",\r\n                environment: \"test\", // change to live for production\r\n                showPayButton: true,\r\n                session: session,\r\n                paymentMethodsConfiguration: {\r\n                    ideal: {\r\n                        showImage: true\r\n                    },\r\n                    card: {\r\n                        hasHolderName: true,\r\n                        holderNameRequired: true,\r\n                        name: \"Credit or debit card\",\r\n                        amount: {\r\n                            value: session.amount.value,\r\n                            currency: session.amount.currency\r\n                        }\r\n                    },\r\n                    paypal: {\r\n                        amount: {\r\n                            currency: session.amount.currency,\r\n                            value: session.amount.value\r\n                        },\r\n                        environment: \"test\",\r\n                        countryCode: \"US\"   // Only needed for test. This will be automatically retrieved when you are in production.\r\n                    }\r\n                },\r\n                beforeSubmit: async (data, component, actions) => {\r\n                    console.log(data)\r\n                    payMethodData.value = data;\r\n                    actions.resolve(data);\r\n                },\r\n                onPaymentCompleted: (result, component) => {\r\n                    console.log(\"result: \" + result);\r\n                    handleServerResponse(result, component);\r\n                },\r\n                onError: (error, component) => {\r\n                    console.error(error.name, error.message, error.stack, component);\r\n                }\r\n            };\r\n\r\n            return new AdyenCheckout(configuration);\r\n        }\r\n\r\n        const callServer = async (url, data) => {\r\n            const res = await fetch(url, {\r\n                method: \"POST\",\r\n                body: data ? JSON.stringify(data) : \"\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n            return await res.json();\r\n        }\r\n\r\n        const handleServerResponse = async (res, component) => {\r\n            if (res.action) {\r\n                component.handleAction(res.action);\r\n            } else {\r\n                if (res.resultCode) {\r\n                    emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value, payMethod: payMethodData.value?.paymentMethod?.type });\r\n                }\r\n                // switch (res.resultCode) {\r\n                //     case \"Authorised\":\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value ,payMethod:payMethodData.value?.paymentMethod?.type});\r\n                //         //window.location.href = \"/result/success\";\r\n                //         break;\r\n                //     case \"Pending\":\r\n                //     case \"Received\":\r\n                //         //window.location.href = \"/result/pending\";\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\r\n                //         break;\r\n                //     case \"Refused\":\r\n                //         //window.location.href = \"/result/failed\";\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\r\n                //         break;\r\n                //     default:\r\n                //         // window.location.href = \"/result/error\";\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\r\n                //         break;\r\n                // }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        return { payElementRef }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.payment {\r\n    .adyen-checkout__status {\r\n        height: 150px;\r\n    }\r\n}\r\n</style>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}