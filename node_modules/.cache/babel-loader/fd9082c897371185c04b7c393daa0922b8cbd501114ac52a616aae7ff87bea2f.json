{"ast":null,"code":"import gql from 'graphql-tag';\nimport { getValue } from '../../src/lib';\nimport useCategories from '../useCategories';\nimport { useEffect, useState } from 'react';\nimport useQuery from '../useQueryFacade';\n//@todo: price for logged in user (do in React, mock in Vue)\n//@todo: we will worry about importing the partials\n//  when the cart route is done\nconst query = expand => gql`\n  query products(\n    $locale: Locale!\n    $limit: Int!\n    $offset: Int!\n    $priceSelector: PriceSelectorInput!\n    $sorts: [String!] = []\n    $filters: [SearchFilterInput!] = [],\n    $text: String = \"\"\n  ) {\n    productProjectionSearch(\n      locale: $locale\n      text: $text\n      limit: $limit\n      offset: $offset\n      sorts: $sorts\n      priceSelector: $priceSelector\n      filters: $filters\n    ) {\n      total\n      results {\n        # better never select id or cache breaks\n        # https://github.com/apollographql/apollo-client/issues/9429\n        productId: id\n        name(locale: $locale)\n        slug(locale: $locale)\n        ${expand.variants ? `variants {\n          variantId: id\n          sku\n          images {\n         \t  url \n          }\n          attributesRaw {\n            name\n            value\n          }\n          scopedPrice {\n            value {\n              currencyCode\n              centAmount\n              fractionDigits\n            }\n            discounted {\n              discount {\n                name(locale: $locale)\n              }\n              value {\n                currencyCode\n                centAmount\n                fractionDigits\n              }\n            }\n            country\n          }\n        }` : ''}\n        masterVariant {\n          # better never select id or cache breaks\n          # https://github.com/apollographql/apollo-client/issues/9429\n          variantId: id\n          sku\n          images {\n         \t  url \n          }\n          attributesRaw {\n            name\n            value\n          }\n          scopedPrice {\n            value {\n              currencyCode\n              centAmount\n              fractionDigits\n            }\n            discounted {\n              discount {\n                name(locale: $locale)\n              }\n              value {\n                currencyCode\n                centAmount\n                fractionDigits\n              }\n            }\n            country\n          }\n        }\n      }\n    }\n  }\n`;\nfunction useCategoryId({\n  categorySlug,\n  setSkip,\n  locale\n}) {\n  const [skipCategory, setSkipCategory] = useState(!getValue(categorySlug) || !getValue(locale));\n  const [categoryId, setCategoryId] = useState(null);\n  //@todo: Error handling needed\n  const {\n    categories,\n    error\n  } = useCategories({\n    categorySlug,\n    skip: skipCategory\n  });\n  useEffect(() => {\n    setSkipCategory(!getValue(categorySlug) || !getValue(locale));\n    setSkip(getValue(categorySlug) && !getValue(categoryId));\n  }, [categorySlug, categoryId, setSkip, locale]);\n  useEffect(() => {\n    setCategoryId(getValue(categorySlug) && getValue(categories) ? getValue(categories)?.[0]?.id : null);\n  }, [categories, categorySlug]);\n  return {\n    categoryId,\n    error\n  };\n}\nconst updateFilters = (filters, sku, categoryId, categorySlug) => filters.filter(f => !(f?.model?.value?.path === 'variants.sku')).filter(filter => !(filter?.model?.tree?.path === 'categories.id')).concat(sku ? {\n  model: {\n    value: {\n      path: 'variants.sku',\n      values: [sku]\n    }\n  }\n} : undefined).concat(categorySlug && categoryId ? {\n  model: {\n    tree: {\n      path: 'categories.id',\n      rootValues: [],\n      subTreeValues: [categoryId]\n    }\n  }\n} : undefined).filter(f => f);\nconst createPriceSelector = (currency, country, channel, customerGroup) => ({\n  currency: getValue(currency),\n  country: getValue(country),\n  channel: getValue(channel) ? {\n    typeId: 'priceChannel',\n    id: getValue(channel).id\n  } : null,\n  customerGroup: getValue(customerGroup) ? {\n    id: getValue(customerGroup),\n    typeId: 'customer-group'\n  } : null\n});\n//this is the React api useQuery(query,options)\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\nconst useProducts = ({\n  search,\n  locale,\n  limit,\n  offset,\n  currency,\n  country,\n  sorts,\n  categorySlug,\n  expand = {},\n  sku,\n  customerGroup,\n  channel\n}) => {\n  const [products, setProducts] = useState();\n  const [priceSelector, setPriceSelector] = useState(createPriceSelector(currency, country, channel, customerGroup));\n  const [skip, setSkip] = useState(true);\n  const [total, setTotal] = useState();\n  const {\n    categoryId,\n    error: categoryError\n  } = useCategoryId({\n    categorySlug,\n    setSkip,\n    locale\n  });\n  const [filters, setFilters] = useState(() => updateFilters([{\n    model: {\n      range: {\n        path: 'variants.scopedPrice.value.centAmount',\n        ranges: [{\n          from: '0',\n          to: '1000000000000'\n        }]\n      }\n    }\n  }], getValue(sku), getValue(categoryId), getValue(categorySlug)));\n  useEffect(() => {\n    setPriceSelector(createPriceSelector(currency, country, channel, customerGroup));\n  }, [currency, country, channel, customerGroup]);\n  useEffect(() => setFilters(filters => updateFilters(filters, getValue(sku), getValue(categoryId), getValue(categorySlug))), [categoryId, categorySlug, sku]);\n  const {\n    loading,\n    error\n  } = useQuery(query(expand), {\n    variables: {\n      text: search,\n      locale,\n      limit,\n      offset,\n      sorts,\n      priceSelector,\n      filters\n    },\n    onCompleted: data => {\n      if (!data) {\n        return;\n      }\n      //missing data will break sunrise\n      setProducts(data.productProjectionSearch.results.map(item => ({\n        ...item,\n        name: item.name || 'Product name missing',\n        slug: item.slug || 'product slug missing'\n      })));\n      setTotal(data.productProjectionSearch.total);\n    },\n    skip\n  });\n  return {\n    total,\n    products,\n    loading,\n    error,\n    categoryError\n  };\n};\nexport default useProducts;","map":{"version":3,"names":["gql","getValue","useCategories","useEffect","useState","useQuery","query","expand","variants","useCategoryId","categorySlug","setSkip","locale","skipCategory","setSkipCategory","categoryId","setCategoryId","categories","error","skip","id","updateFilters","filters","sku","filter","f","model","value","path","tree","concat","values","undefined","rootValues","subTreeValues","createPriceSelector","currency","country","channel","customerGroup","typeId","useProducts","search","limit","offset","sorts","products","setProducts","priceSelector","setPriceSelector","total","setTotal","categoryError","setFilters","range","ranges","from","to","loading","variables","text","onCompleted","data","productProjectionSearch","results","map","item","name","slug"],"sources":["/Users/souvitroy/Downloads/commercetools/ctools/composition/ct/useProducts.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport { getValue } from '../../src/lib';\r\nimport useCategories from '../useCategories';\r\nimport { useEffect, useState } from 'react';\r\nimport useQuery from '../useQueryFacade';\r\n//@todo: price for logged in user (do in React, mock in Vue)\r\n//@todo: we will worry about importing the partials\r\n//  when the cart route is done\r\nconst query = (expand) => gql`\r\n  query products(\r\n    $locale: Locale!\r\n    $limit: Int!\r\n    $offset: Int!\r\n    $priceSelector: PriceSelectorInput!\r\n    $sorts: [String!] = []\r\n    $filters: [SearchFilterInput!] = [],\r\n    $text: String = \"\"\r\n  ) {\r\n    productProjectionSearch(\r\n      locale: $locale\r\n      text: $text\r\n      limit: $limit\r\n      offset: $offset\r\n      sorts: $sorts\r\n      priceSelector: $priceSelector\r\n      filters: $filters\r\n    ) {\r\n      total\r\n      results {\r\n        # better never select id or cache breaks\r\n        # https://github.com/apollographql/apollo-client/issues/9429\r\n        productId: id\r\n        name(locale: $locale)\r\n        slug(locale: $locale)\r\n        ${\r\n          expand.variants\r\n            ? `variants {\r\n          variantId: id\r\n          sku\r\n          images {\r\n         \t  url \r\n          }\r\n          attributesRaw {\r\n            name\r\n            value\r\n          }\r\n          scopedPrice {\r\n            value {\r\n              currencyCode\r\n              centAmount\r\n              fractionDigits\r\n            }\r\n            discounted {\r\n              discount {\r\n                name(locale: $locale)\r\n              }\r\n              value {\r\n                currencyCode\r\n                centAmount\r\n                fractionDigits\r\n              }\r\n            }\r\n            country\r\n          }\r\n        }`\r\n            : ''\r\n        }\r\n        masterVariant {\r\n          # better never select id or cache breaks\r\n          # https://github.com/apollographql/apollo-client/issues/9429\r\n          variantId: id\r\n          sku\r\n          images {\r\n         \t  url \r\n          }\r\n          attributesRaw {\r\n            name\r\n            value\r\n          }\r\n          scopedPrice {\r\n            value {\r\n              currencyCode\r\n              centAmount\r\n              fractionDigits\r\n            }\r\n            discounted {\r\n              discount {\r\n                name(locale: $locale)\r\n              }\r\n              value {\r\n                currencyCode\r\n                centAmount\r\n                fractionDigits\r\n              }\r\n            }\r\n            country\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction useCategoryId({ categorySlug, setSkip, locale }) {\r\n  const [skipCategory, setSkipCategory] = useState(\r\n    !getValue(categorySlug) || !getValue(locale)\r\n  );\r\n  const [categoryId, setCategoryId] = useState(null);\r\n  //@todo: Error handling needed\r\n  const { categories, error } = useCategories({\r\n    categorySlug,\r\n    skip: skipCategory,\r\n  });\r\n  useEffect(() => {\r\n    setSkipCategory(\r\n      !getValue(categorySlug) || !getValue(locale)\r\n    );\r\n    setSkip(\r\n      getValue(categorySlug) && !getValue(categoryId)\r\n    );\r\n  }, [categorySlug, categoryId, setSkip, locale]);\r\n  useEffect(() => {\r\n    setCategoryId(\r\n      getValue(categorySlug) && getValue(categories)\r\n        ? getValue(categories)?.[0]?.id\r\n        : null\r\n    );\r\n  }, [categories, categorySlug]);\r\n  return { categoryId, error };\r\n}\r\nconst updateFilters = (\r\n  filters,\r\n  sku,\r\n  categoryId,\r\n  categorySlug\r\n) =>\r\n  filters\r\n    .filter(\r\n      (f) => !(f?.model?.value?.path === 'variants.sku')\r\n    )\r\n    .filter(\r\n      (filter) =>\r\n        !(filter?.model?.tree?.path === 'categories.id')\r\n    )\r\n    .concat(\r\n      sku\r\n        ? {\r\n            model: {\r\n              value: {\r\n                path: 'variants.sku',\r\n                values: [sku],\r\n              },\r\n            },\r\n          }\r\n        : undefined\r\n    )\r\n    .concat(\r\n      categorySlug && categoryId\r\n        ? {\r\n            model: {\r\n              tree: {\r\n                path: 'categories.id',\r\n                rootValues: [],\r\n                subTreeValues: [categoryId],\r\n              },\r\n            },\r\n          }\r\n        : undefined\r\n    )\r\n    .filter((f) => f);\r\nconst createPriceSelector = (\r\n  currency,\r\n  country,\r\n  channel,\r\n  customerGroup\r\n) => ({\r\n  currency: getValue(currency),\r\n  country: getValue(country),\r\n  channel: getValue(channel)\r\n    ? {\r\n        typeId: 'priceChannel',\r\n        id: getValue(channel).id,\r\n      }\r\n    : null,\r\n  customerGroup: getValue(customerGroup)\r\n    ? {\r\n        id: getValue(customerGroup),\r\n        typeId: 'customer-group',\r\n      }\r\n    : null,\r\n});\r\n//this is the React api useQuery(query,options)\r\n// https://www.apollographql.com/docs/react/api/react/hooks/#function-signature\r\nconst useProducts = ({\r\n  search,\r\n  locale,\r\n  limit,\r\n  offset,\r\n  currency,\r\n  country,\r\n  sorts,\r\n  categorySlug,\r\n  expand = {},\r\n  sku,\r\n  customerGroup,\r\n  channel,\r\n}) => {\r\n  const [products, setProducts] = useState();\r\n  const [priceSelector, setPriceSelector] = useState(\r\n    createPriceSelector(\r\n      currency,\r\n      country,\r\n      channel,\r\n      customerGroup\r\n    )\r\n  );\r\n  const [skip, setSkip] = useState(true);\r\n  const [total, setTotal] = useState();\r\n  const { categoryId, error: categoryError } =\r\n    useCategoryId({\r\n      categorySlug,\r\n      setSkip,\r\n      locale,\r\n    });\r\n  const [filters, setFilters] = useState(() =>\r\n    updateFilters(\r\n      [\r\n        {\r\n          model: {\r\n            range: {\r\n              path: 'variants.scopedPrice.value.centAmount',\r\n              ranges: [\r\n                {\r\n                  from: '0',\r\n                  to: '1000000000000',\r\n                },\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      getValue(sku),\r\n      getValue(categoryId),\r\n      getValue(categorySlug)\r\n    )\r\n  );\r\n  useEffect(() => {\r\n    setPriceSelector(\r\n      createPriceSelector(\r\n        currency,\r\n        country,\r\n        channel,\r\n        customerGroup\r\n      )\r\n    );\r\n  }, [currency, country, channel, customerGroup]);\r\n  useEffect(\r\n    () =>\r\n      setFilters((filters) =>\r\n        updateFilters(\r\n          filters,\r\n          getValue(sku),\r\n          getValue(categoryId),\r\n          getValue(categorySlug)\r\n        )\r\n      ),\r\n    [categoryId, categorySlug, sku]\r\n  );\r\n  const { loading, error } = useQuery(query(expand), {\r\n    variables: {\r\n      text: search,\r\n      locale,\r\n      limit,\r\n      offset,\r\n      sorts,\r\n      priceSelector,\r\n      filters,\r\n    },\r\n    onCompleted: (data) => {\r\n      if (!data) {\r\n        return;\r\n      }\r\n      //missing data will break sunrise\r\n      setProducts(\r\n        data.productProjectionSearch.results.map(\r\n          (item) => ({\r\n            ...item,\r\n            name: item.name || 'Product name missing',\r\n            slug: item.slug || 'product slug missing',\r\n          })\r\n        )\r\n      );\r\n      setTotal(data.productProjectionSearch.total);\r\n    },\r\n    skip,\r\n  });\r\n  return { total, products, loading, error, categoryError };\r\n};\r\nexport default useProducts;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,SAASC,QAAQ,QAAQ,eAAe;AACxC,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,mBAAmB;AACxC;AACA;AACA;AACA,MAAMC,KAAK,GAAIC,MAAM,IAAKP,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACUO,MAAM,CAACC,QAAQ,GACV;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,GACI,EACL;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASC,aAAa,CAAC;EAAEC,YAAY;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EACxD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAC9C,CAACH,QAAQ,CAACS,YAAY,CAAC,IAAI,CAACT,QAAQ,CAACW,MAAM,CAAC,CAC7C;EACD,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClD;EACA,MAAM;IAAEa,UAAU;IAAEC;EAAM,CAAC,GAAGhB,aAAa,CAAC;IAC1CQ,YAAY;IACZS,IAAI,EAAEN;EACR,CAAC,CAAC;EACFV,SAAS,CAAC,MAAM;IACdW,eAAe,CACb,CAACb,QAAQ,CAACS,YAAY,CAAC,IAAI,CAACT,QAAQ,CAACW,MAAM,CAAC,CAC7C;IACDD,OAAO,CACLV,QAAQ,CAACS,YAAY,CAAC,IAAI,CAACT,QA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}