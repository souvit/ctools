{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport '@adyen/adyen-web/dist/adyen.css';\nlet AdyenCheckout;\nAdyenCheckout = require(\"@adyen/adyen-web\");\nexport default {\n  props: {\n    amount: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const sessionId = ref(\"\");\n    const redirectResult = ref(\"\");\n    const pspRef = ref(\"\");\n    const payType = \"dropin\";\n    const payElementRef = ref(null);\n    const payMethodData = ref(null);\n    const cartAmount = computed(() => props.amount);\n    onMounted(async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      sessionId.value = urlParams.get('sessionId');\n      redirectResult.value = urlParams.get('redirectResult');\n      if (sessionId.value) {\n        // found session: finalize checkout\n        await finalizeCheckout();\n      } else {\n        // no session: init checkout\n        await startCheckout();\n      }\n    });\n    const startCheckout = async () => {\n      try {\n        // Initiate Sessions\n        const {\n          response,\n          clientKey\n        } = await callServer(\"/api/sessions?type=\" + payType, {\n          amount: cartAmount.value.centAmount\n        });\n\n        // Create AdyenCheckout using Sessions response\n        const checkout = await createAdyenCheckout(response, clientKey);\n\n        // Create an instance of Drop-in and mount it\n        checkout.create(payType).mount(payElementRef.value);\n      } catch (error) {\n        console.error(error);\n        alert(\"Error occurred. Look at console for details\");\n      }\n    };\n    const finalizeCheckout = async () => {\n      try {\n        // Create AdyenCheckout re-using existing Session\n        const checkout = await createAdyenCheckout({\n          id: sessionId.value\n        });\n\n        // Submit the extracted redirectResult (to trigger onPaymentCompleted() handler)\n        checkout.submitDetails({\n          details: redirectResult.value\n        });\n      } catch (error) {\n        console.error(error);\n        alert(\"Error occurred. Look at console for details\");\n      }\n    };\n    const createAdyenCheckout = async (session, clientKey) => {\n      pspRef.value = session.reference;\n      const configuration = {\n        clientKey: clientKey,\n        locale: \"en_US\",\n        environment: \"test\",\n        // change to live for production\n        showPayButton: true,\n        session: session,\n        paymentMethodsConfiguration: {\n          ideal: {\n            showImage: true\n          },\n          card: {\n            hasHolderName: true,\n            holderNameRequired: true,\n            name: \"Credit or debit card\",\n            amount: {\n              value: session.amount.value,\n              currency: session.amount.currency\n            }\n          },\n          paypal: {\n            amount: {\n              currency: session.amount.currency,\n              value: session.amount.value\n            },\n            environment: \"test\",\n            countryCode: \"US\" // Only needed for test. This will be automatically retrieved when you are in production.\n          }\n        },\n\n        beforeSubmit: async (data, component, actions) => {\n          console.log(data);\n          payMethodData.value = data;\n          actions.resolve(data);\n        },\n        onPaymentCompleted: (result, component) => {\n          console.log(\"result: \" + result);\n          handleServerResponse(result, component);\n        },\n        onError: (error, component) => {\n          console.error(error.name, error.message, error.stack, component);\n        }\n      };\n      return new AdyenCheckout(configuration);\n    };\n    const callServer = async (url, data) => {\n      const res = await fetch(url, {\n        method: \"POST\",\n        body: data ? JSON.stringify(data) : \"\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      return await res.json();\n    };\n    const handleServerResponse = async (res, component) => {\n      if (res.action) {\n        component.handleAction(res.action);\n      } else {\n        if (res.resultCode) {\n          emit('payment-status', {\n            resultCode: res.resultCode,\n            paymentRef: pspRef.value,\n            payMethod: payMethodData.value?.paymentMethod?.type\n          });\n        }\n        // switch (res.resultCode) {\n        //     case \"Authorised\":\n        //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value ,payMethod:payMethodData.value?.paymentMethod?.type});\n        //         //window.location.href = \"/result/success\";\n        //         break;\n        //     case \"Pending\":\n        //     case \"Received\":\n        //         //window.location.href = \"/result/pending\";\n        //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\n        //         break;\n        //     case \"Refused\":\n        //         //window.location.href = \"/result/failed\";\n        //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\n        //         break;\n        //     default:\n        //         // window.location.href = \"/result/error\";\n        //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\n        //         break;\n        // }\n      }\n    };\n\n    return {\n      payElementRef\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["ref","onMounted","computed","AdyenCheckout","require","props","amount","type","Number","required","setup","emit","sessionId","redirectResult","pspRef","payType","payElementRef","payMethodData","cartAmount","urlParams","URLSearchParams","window","location","search","value","get","finalizeCheckout","startCheckout","response","clientKey","callServer","centAmount","checkout","createAdyenCheckout","create","mount","error","console","alert","id","submitDetails","details","session","reference","configuration","locale","environment","showPayButton","paymentMethodsConfiguration","ideal","showImage","card","hasHolderName","holderNameRequired","name","currency","paypal","countryCode","beforeSubmit","data","component","actions","log","resolve","onPaymentCompleted","result","handleServerResponse","onError","message","stack","url","res","fetch","method","body","JSON","stringify","headers","json","action","handleAction","resultCode","paymentRef","payMethod","paymentMethod"],"sourceRoot":"","sources":["/Users/souvitroy/Downloads/commercetools/ctools/src/presentation/fashion/PageCheckout/Payment/Payment.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div id=\"payment-page\">\r\n            <div class=\"container\">\r\n                <div class=\"payment-container\">\r\n                    <div class=\"payment\" ref=\"payElementRef\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script >\r\nimport { ref, onMounted, computed } from 'vue';\r\n\r\nimport '@adyen/adyen-web/dist/adyen.css';\r\nlet AdyenCheckout;\r\nAdyenCheckout = require(\"@adyen/adyen-web\");\r\n\r\nexport default {\r\n    props: {\r\n        amount: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, { emit }) {\r\n        const sessionId = ref(\"\");\r\n        const redirectResult = ref(\"\");\r\n        const pspRef = ref(\"\");\r\n        const payType = \"dropin\";\r\n        const payElementRef = ref(null);\r\n        const payMethodData = ref(null);\r\n        const cartAmount = computed(() => props.amount);\r\n\r\n        onMounted(async () => {\r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            sessionId.value = urlParams.get('sessionId');\r\n            redirectResult.value = urlParams.get('redirectResult');\r\n\r\n            if (sessionId.value) {\r\n                // found session: finalize checkout\r\n                await finalizeCheckout();\r\n            } else {\r\n                // no session: init checkout\r\n                await startCheckout();\r\n            }\r\n        });\r\n\r\n\r\n\r\n        const startCheckout = async () => {\r\n            try {\r\n                // Initiate Sessions\r\n                const { response, clientKey } = await callServer(\r\n                    \"/api/sessions?type=\" + payType,\r\n                    {\r\n                        amount: cartAmount.value.centAmount\r\n                    }\r\n                );\r\n\r\n\r\n\r\n                // Create AdyenCheckout using Sessions response\r\n                const checkout = await createAdyenCheckout(response, clientKey);\r\n\r\n                // Create an instance of Drop-in and mount it\r\n                checkout.create(payType).mount(payElementRef.value);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                alert(\"Error occurred. Look at console for details\");\r\n            }\r\n        }\r\n\r\n        const finalizeCheckout = async () => {\r\n            try {\r\n                // Create AdyenCheckout re-using existing Session\r\n                const checkout = await createAdyenCheckout({ id: sessionId.value });\r\n\r\n                // Submit the extracted redirectResult (to trigger onPaymentCompleted() handler)\r\n                checkout.submitDetails({ details: redirectResult.value });\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                alert(\"Error occurred. Look at console for details\");\r\n            }\r\n        }\r\n\r\n        const createAdyenCheckout = async (session, clientKey) => {\r\n            pspRef.value = session.reference;\r\n            const configuration = {\r\n                clientKey: clientKey,\r\n                locale: \"en_US\",\r\n                environment: \"test\", // change to live for production\r\n                showPayButton: true,\r\n                session: session,\r\n                paymentMethodsConfiguration: {\r\n                    ideal: {\r\n                        showImage: true\r\n                    },\r\n                    card: {\r\n                        hasHolderName: true,\r\n                        holderNameRequired: true,\r\n                        name: \"Credit or debit card\",\r\n                        amount: {\r\n                            value: session.amount.value,\r\n                            currency: session.amount.currency\r\n                        }\r\n                    },\r\n                    paypal: {\r\n                        amount: {\r\n                            currency: session.amount.currency,\r\n                            value: session.amount.value\r\n                        },\r\n                        environment: \"test\",\r\n                        countryCode: \"US\"   // Only needed for test. This will be automatically retrieved when you are in production.\r\n                    }\r\n                },\r\n                beforeSubmit: async (data, component, actions) => {\r\n                    console.log(data)\r\n                    payMethodData.value = data;\r\n                    actions.resolve(data);\r\n                },\r\n                onPaymentCompleted: (result, component) => {\r\n                    console.log(\"result: \" + result);\r\n                    handleServerResponse(result, component);\r\n                },\r\n                onError: (error, component) => {\r\n                    console.error(error.name, error.message, error.stack, component);\r\n                }\r\n            };\r\n\r\n            return new AdyenCheckout(configuration);\r\n        }\r\n\r\n        const callServer = async (url, data) => {\r\n            const res = await fetch(url, {\r\n                method: \"POST\",\r\n                body: data ? JSON.stringify(data) : \"\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n            return await res.json();\r\n        }\r\n\r\n        const handleServerResponse = async (res, component) => {\r\n            if (res.action) {\r\n                component.handleAction(res.action);\r\n            } else {\r\n                if (res.resultCode) {\r\n                    emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value, payMethod: payMethodData.value?.paymentMethod?.type });\r\n                }\r\n                // switch (res.resultCode) {\r\n                //     case \"Authorised\":\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value ,payMethod:payMethodData.value?.paymentMethod?.type});\r\n                //         //window.location.href = \"/result/success\";\r\n                //         break;\r\n                //     case \"Pending\":\r\n                //     case \"Received\":\r\n                //         //window.location.href = \"/result/pending\";\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\r\n                //         break;\r\n                //     case \"Refused\":\r\n                //         //window.location.href = \"/result/failed\";\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\r\n                //         break;\r\n                //     default:\r\n                //         // window.location.href = \"/result/error\";\r\n                //         emit('payment-status', { resultCode: res.resultCode, paymentRef: pspRef.value });\r\n                //         break;\r\n                // }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        return { payElementRef }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.payment {\r\n    .adyen-checkout__status {\r\n        height: 150px;\r\n    }\r\n}\r\n</style>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}