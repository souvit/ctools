"use strict";
/*
 * The version of the OpenAPI document: v1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const managementResource_1 = __importDefault(require("../resource/management/managementResource"));
const models_1 = require("../../typings/management/models");
class TerminalOrdersCompanyLevelApi extends service_1.default {
    /**
     * @summary Get a list of billing entities
     * @param companyId The unique identifier of the company account.
     * @param name The name of the billing entity.
     */
    async listBillingEntities(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/billingEntities"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "BillingEntitiesResponse");
    }
    /**
     * @summary Get a list of shipping locations
     * @param companyId The unique identifier of the company account.
     * @param name The name of the shipping location.
     * @param offset The number of locations to skip.
     * @param limit The number of locations to return.
     */
    async listShippingLocations(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/shippingLocations"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ShippingLocationsResponse");
    }
    /**
     * @summary Get a list of terminal models
     * @param companyId The unique identifier of the company account.
     */
    async listTerminalModels(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalModels"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalModelsResponse");
    }
    /**
     * @summary Get a list of orders
     * @param companyId The unique identifier of the company account.
     * @param customerOrderReference Your purchase order number.
     * @param status The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered.
     * @param offset The number of orders to skip.
     * @param limit The number of orders to return.
     */
    async listOrders(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalOrders"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalOrdersResponse");
    }
    /**
     * @summary Get an order
     * @param companyId The unique identifier of the company account.
     * @param orderId The unique identifier of the order.
     */
    async getOrder(companyId, orderId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalOrders/{orderId}"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)))
            .replace('{' + 'orderId' + '}', encodeURIComponent(String(orderId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalOrder");
    }
    /**
     * @summary Get a list of terminal products
     * @param companyId The unique identifier of the company account.
     * @param country The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**
     * @param terminalModelId The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/terminalModels) response. For example, **Verifone.M400**
     * @param offset The number of products to skip.
     * @param limit The number of products to return.
     */
    async listTerminalProducts(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalProducts"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalProductsResponse");
    }
    /**
     * @summary Update an order
     * @param companyId The unique identifier of the company account.
     * @param orderId The unique identifier of the order.
     * @param terminalOrderRequest
     */
    async updateOrder(companyId, orderId, terminalOrderRequest, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalOrders/{orderId}"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)))
            .replace('{' + 'orderId' + '}', encodeURIComponent(String(orderId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const request = models_1.ObjectSerializer.serialize(terminalOrderRequest, "TerminalOrderRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalOrder");
    }
    /**
     * @summary Create a shipping location
     * @param companyId The unique identifier of the company account.
     * @param shippingLocation
     */
    async createShippingLocation(companyId, shippingLocation, requestOptions) {
        const localVarPath = "/companies/{companyId}/shippingLocations"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const request = models_1.ObjectSerializer.serialize(shippingLocation, "ShippingLocation");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "ShippingLocation");
    }
    /**
     * @summary Create an order
     * @param companyId The unique identifier of the company account.
     * @param terminalOrderRequest
     */
    async createOrder(companyId, terminalOrderRequest, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalOrders"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const request = models_1.ObjectSerializer.serialize(terminalOrderRequest, "TerminalOrderRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalOrder");
    }
    /**
     * @summary Cancel an order
     * @param companyId The unique identifier of the company account.
     * @param orderId The unique identifier of the order.
     */
    async cancelOrder(companyId, orderId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalOrders/{orderId}/cancel"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)))
            .replace('{' + 'orderId' + '}', encodeURIComponent(String(orderId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalOrder");
    }
}
exports.default = TerminalOrdersCompanyLevelApi;
//# sourceMappingURL=terminalOrdersCompanyLevelApi.js.map