"use strict";
/*
 * The version of the OpenAPI document: v1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const managementResource_1 = __importDefault(require("../resource/management/managementResource"));
const models_1 = require("../../typings/management/models");
class WebhooksMerchantLevelApi extends service_1.default {
    /**
     * @summary Remove a webhook
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     */
    async removeWebhook(merchantId, webhookId, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks/{webhookId}"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)))
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        const resource = new managementResource_1.default(this, localVarPath);
        await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "DELETE" });
    }
    /**
     * @summary List all webhooks
     * @param merchantId The unique identifier of the merchant account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 10 items on a page.
     */
    async listAllWebhooks(merchantId, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ListWebhooksResponse");
    }
    /**
     * @summary Get a webhook
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     */
    async getWebhook(merchantId, webhookId, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks/{webhookId}"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)))
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "Webhook");
    }
    /**
     * @summary Update a webhook
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     * @param updateMerchantWebhookRequest
     */
    async updateWebhook(merchantId, webhookId, updateMerchantWebhookRequest, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks/{webhookId}"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)))
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const request = models_1.ObjectSerializer.serialize(updateMerchantWebhookRequest, "UpdateMerchantWebhookRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "Webhook");
    }
    /**
     * @summary Set up a webhook
     * @param merchantId The unique identifier of the merchant account.
     * @param createMerchantWebhookRequest
     */
    async setUpWebhook(merchantId, createMerchantWebhookRequest, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const request = models_1.ObjectSerializer.serialize(createMerchantWebhookRequest, "CreateMerchantWebhookRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "Webhook");
    }
    /**
     * @summary Generate an HMAC key
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId
     */
    async generateHmacKey(merchantId, webhookId, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks/{webhookId}/generateHmac"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)))
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "GenerateHmacKeyResponse");
    }
    /**
     * @summary Test a webhook
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     * @param testWebhookRequest
     */
    async testWebhook(merchantId, webhookId, testWebhookRequest, requestOptions) {
        const localVarPath = "/merchants/{merchantId}/webhooks/{webhookId}/test"
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)))
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const request = models_1.ObjectSerializer.serialize(testWebhookRequest, "TestWebhookRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "TestWebhookResponse");
    }
}
exports.default = WebhooksMerchantLevelApi;
//# sourceMappingURL=webhooksMerchantLevelApi.js.map