import Service from "../../service";
import { AndroidAppsResponse } from '../../typings/management/models';
import { AndroidCertificatesResponse } from '../../typings/management/models';
import { ExternalTerminalAction } from '../../typings/management/models';
import { ListExternalTerminalActionsResponse } from '../../typings/management/models';
import { IRequest } from "../../typings/requestOptions";
export default class TerminalActionsCompanyLevelApi extends Service {
    /**
     * @summary Get a list of Android apps
     * @param companyId The unique identifier of the company account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 20 items on a page.
     */
    listAndroidApps(companyId: string, requestOptions?: IRequest.Options): Promise<AndroidAppsResponse>;
    /**
     * @summary Get a list of Android certificates
     * @param companyId The unique identifier of the company account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 20 items on a page.
     */
    listAndroidCertificates(companyId: string, requestOptions?: IRequest.Options): Promise<AndroidCertificatesResponse>;
    /**
     * @summary Get a list of terminal actions
     * @param companyId The unique identifier of the company account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 20 items on a page.
     * @param status Returns terminal actions with the specified status.  Allowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**.
     * @param type Returns terminal actions of the specified type.  Allowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**.
     */
    listTerminalActions(companyId: string, requestOptions?: IRequest.Options): Promise<ListExternalTerminalActionsResponse>;
    /**
     * @summary Get terminal action
     * @param companyId The unique identifier of the company account.
     * @param actionId The unique identifier of the terminal action.
     */
    getTerminalAction(companyId: string, actionId: string, requestOptions?: IRequest.Options): Promise<ExternalTerminalAction>;
}
