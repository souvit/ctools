"use strict";
/*
 * The version of the OpenAPI document: v1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const managementResource_1 = __importDefault(require("../resource/management/managementResource"));
const models_1 = require("../../typings/management/models");
class TerminalActionsCompanyLevelApi extends service_1.default {
    /**
     * @summary Get a list of Android apps
     * @param companyId The unique identifier of the company account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 20 items on a page.
     */
    async listAndroidApps(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/androidApps"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "AndroidAppsResponse");
    }
    /**
     * @summary Get a list of Android certificates
     * @param companyId The unique identifier of the company account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 20 items on a page.
     */
    async listAndroidCertificates(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/androidCertificates"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "AndroidCertificatesResponse");
    }
    /**
     * @summary Get a list of terminal actions
     * @param companyId The unique identifier of the company account.
     * @param pageNumber The number of the page to fetch.
     * @param pageSize The number of items to have on a page, maximum 100. The default is 20 items on a page.
     * @param status Returns terminal actions with the specified status.  Allowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**.
     * @param type Returns terminal actions of the specified type.  Allowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**.
     */
    async listTerminalActions(companyId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalActions"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ListExternalTerminalActionsResponse");
    }
    /**
     * @summary Get terminal action
     * @param companyId The unique identifier of the company account.
     * @param actionId The unique identifier of the terminal action.
     */
    async getTerminalAction(companyId, actionId, requestOptions) {
        const localVarPath = "/companies/{companyId}/terminalActions/{actionId}"
            .replace('{' + 'companyId' + '}', encodeURIComponent(String(companyId)))
            .replace('{' + 'actionId' + '}', encodeURIComponent(String(actionId)));
        const resource = new managementResource_1.default(this, localVarPath);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ExternalTerminalAction");
    }
}
exports.default = TerminalActionsCompanyLevelApi;
//# sourceMappingURL=terminalActionsCompanyLevelApi.js.map