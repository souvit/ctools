import ApiKeyAuthenticatedService from "../apiKeyAuthenticatedService";
import Client from "../client";
import { IRequest } from "../typings/requestOptions";
import { CreateApplePaySessionRequest, ApplePaySessionResponse, ListStoredPaymentMethodsResponse, StoredPaymentMethodResource, PaymentRequest, PaymentResponse, PaymentMethodsRequest, PaymentMethodsResponse, PaymentLinkResponse, CreatePaymentLinkRequest, DetailsRequest, PaymentSetupRequest, PaymentSetupResponse, PaymentVerificationRequest, PaymentVerificationResponse, CheckoutUtilityRequest, CheckoutUtilityResponse, CheckoutBalanceCheckRequest, CheckoutBalanceCheckResponse, CheckoutCreateOrderRequest, CheckoutCreateOrderResponse, CheckoutCancelOrderRequest, CheckoutCancelOrderResponse, CreateCheckoutSessionRequest, CreateCheckoutSessionResponse, PaymentDonationRequest, DonationResponse, CardDetailsRequest, CardDetailsResponse, CreatePaymentAmountUpdateRequest, CreatePaymentCancelRequest, CreatePaymentCaptureRequest, CreatePaymentRefundRequest, CreatePaymentReversalRequest, CreateStandalonePaymentCancelRequest, PaymentAmountUpdateResource, PaymentCancelResource, PaymentCaptureResource, PaymentRefundResource, PaymentReversalResource, StandalonePaymentCancelResource } from "../typings/checkout/models";
declare class Checkout extends ApiKeyAuthenticatedService {
    private readonly _payments;
    private readonly _paymentMethods;
    private readonly _paymentsDetails;
    private readonly _paymentSession;
    private readonly _paymentsResult;
    private readonly _paymentLinks;
    private readonly _originKeys;
    private readonly _paymentMethodsBalance;
    private readonly _orders;
    private readonly _ordersCancel;
    private readonly _sessions;
    private readonly _donations;
    private readonly _cardDetails;
    private readonly _cancelsStandalone;
    private readonly _applePaySessions;
    private readonly _getStoredPaymentMethods;
    constructor(client: Client);
    sessions(checkoutSessionRequest: CreateCheckoutSessionRequest, requestOptions?: IRequest.Options): Promise<CreateCheckoutSessionResponse>;
    paymentMethods(paymentMethodsRequest: PaymentMethodsRequest, requestOptions?: IRequest.Options): Promise<PaymentMethodsResponse>;
    payments(paymentsRequest: PaymentRequest, requestOptions?: IRequest.Options): Promise<PaymentResponse>;
    paymentsDetails(paymentsDetailsRequest: DetailsRequest, requestOptions?: IRequest.Options): Promise<PaymentResponse>;
    donations(donationRequest: PaymentDonationRequest, requestOptions?: IRequest.Options): Promise<DonationResponse>;
    cardDetails(cardDetailsRequest: CardDetailsRequest, requestOptions?: IRequest.Options): Promise<CardDetailsResponse>;
    paymentLinks(paymentLinkRequest: CreatePaymentLinkRequest, requestOptions?: IRequest.Options): Promise<PaymentLinkResponse>;
    getPaymentLinks(linkId: string, requestOptions?: IRequest.Options): Promise<PaymentLinkResponse>;
    updatePaymentLinks(linkId: string, status: "expired", requestOptions?: IRequest.Options): Promise<PaymentLinkResponse>;
    amountUpdates(paymentPspReference: string, amountUpdatesRequest: CreatePaymentAmountUpdateRequest, requestOptions?: IRequest.Options): Promise<PaymentAmountUpdateResource>;
    cancelsStandalone(cancelsStandaloneRequest: CreateStandalonePaymentCancelRequest, requestOptions?: IRequest.Options): Promise<StandalonePaymentCancelResource>;
    cancels(paymentPspReference: string, cancelsRequest: CreatePaymentCancelRequest, requestOptions?: IRequest.Options): Promise<PaymentCancelResource>;
    captures(paymentPspReference: string, capturesRequest: CreatePaymentCaptureRequest, requestOptions?: IRequest.Options): Promise<PaymentCaptureResource>;
    refunds(paymentPspReference: string, refundsRequest: CreatePaymentRefundRequest, requestOptions?: IRequest.Options): Promise<PaymentRefundResource>;
    reversals(paymentPspReference: string, reversalsRequest: CreatePaymentReversalRequest, requestOptions?: IRequest.Options): Promise<PaymentReversalResource>;
    paymentMethodsBalance(paymentMethodsBalanceRequest: CheckoutBalanceCheckRequest, requestOptions?: IRequest.Options): Promise<CheckoutBalanceCheckResponse>;
    orders(ordersRequest: CheckoutCreateOrderRequest, requestOptions?: IRequest.Options): Promise<CheckoutCreateOrderResponse>;
    ordersCancel(ordersCancelRequest: CheckoutCancelOrderRequest, requestOptions?: IRequest.Options): Promise<CheckoutCancelOrderResponse>;
    paymentSession(paymentSessionRequest: PaymentSetupRequest, requestOptions?: IRequest.Options): Promise<PaymentSetupResponse>;
    paymentResult(paymentResultRequest: PaymentVerificationRequest, requestOptions?: IRequest.Options): Promise<PaymentVerificationResponse>;
    /**
     * @deprecated Deprecated in version 67
     */
    originKeys(originKeysRequest: CheckoutUtilityRequest, requestOptions?: IRequest.Options): Promise<CheckoutUtilityResponse>;
    applePaySessions(applePaySessionRequest: CreateApplePaySessionRequest, requestOptions?: IRequest.Options): Promise<ApplePaySessionResponse>;
    getStoredPaymentMethods(requestOptions?: IRequest.Options): Promise<ListStoredPaymentMethodsResponse>;
    deleteStoredPaymentMethod(recurringId: string, requestOptions?: IRequest.Options): Promise<StoredPaymentMethodResource>;
}
export default Checkout;
