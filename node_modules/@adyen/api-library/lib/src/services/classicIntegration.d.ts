import ApiKeyAuthenticatedService from "../apiKeyAuthenticatedService";
import Client from "../client";
import { AdjustAuthorisationRequest, AuthenticationResultRequest, AuthenticationResultResponse, CancelOrRefundRequest, CancelRequest, CaptureRequest, DonationRequest, ModificationResult, PaymentRequest, PaymentRequest3d, PaymentRequest3ds2, PaymentResult, RefundRequest, TechnicalCancelRequest, ThreeDS2ResultRequest, ThreeDS2ResultResponse, VoidPendingRefundRequest } from "../typings/payments/models";
declare class ClassicIntegration extends ApiKeyAuthenticatedService {
    private readonly _authorise;
    private readonly _authorise3d;
    private readonly _authorise3ds2;
    private readonly _getAuthenticationResult;
    private readonly _retrieve3ds2Result;
    private readonly _capture;
    private readonly _cancel;
    private readonly _refund;
    private readonly _cancelOrRefund;
    private readonly _technicalCancel;
    private readonly _adjustAuthorisation;
    private readonly _donate;
    private readonly _voidPendingRefund;
    constructor(client: Client);
    authorise(paymentRequest: PaymentRequest): Promise<PaymentResult>;
    authorise3d(paymentRequest3d: PaymentRequest3d): Promise<PaymentResult>;
    authorise3ds2(paymentRequest3ds2: PaymentRequest3ds2): Promise<PaymentResult>;
    getAuthenticationResult(authenticationResultRequest: AuthenticationResultRequest): Promise<AuthenticationResultResponse>;
    retrieve3ds2Result(threeDs2ResultRequest: ThreeDS2ResultRequest): Promise<ThreeDS2ResultResponse>;
    capture(captureRequest: CaptureRequest): Promise<ModificationResult>;
    cancel(cancelRequest: CancelRequest): Promise<ModificationResult>;
    refund(refundRequest: RefundRequest): Promise<ModificationResult>;
    cancelOrRefund(cancelOrRefundRequest: CancelOrRefundRequest): Promise<ModificationResult>;
    technicalCancel(technicalCancelRequest: TechnicalCancelRequest): Promise<ModificationResult>;
    adjustAuthorisation(adjustAuthorisationRequest: AdjustAuthorisationRequest): Promise<ModificationResult>;
    donate(donationRequest: DonationRequest): Promise<ModificationResult>;
    voidPendingRefund(voidPendingRefundRequest: VoidPendingRefundRequest): Promise<ModificationResult>;
}
export default ClassicIntegration;
